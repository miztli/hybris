apply plugin: 'installer-platform-plugin'
apply plugin: 'installer-platform-containerization-plugin'
apply plugin: 'installer-addon2-plugin'

def pl = platform {
    localProperties {
        property 'persistence.legacy.mode', 'false'
        property 'googleApiKey', ''
        property 'solr.config.Default.urls', getSolrModeUrls()
        property 'solr.config.Default.mode', getSolrModeConfig()
        property 'solr.server.mode', getSolrModeConfig()
        property 'solrserver.instances.default.autostart', 'false'
        property 'installed.tenants', ''
        property 'apiregistryservices.events.exporting', 'false'
    }

    extensions {
        extName 'gridfsstorage'
        extName 'adaptivesearchsolr'
        extName 'adaptivesearchbackoffice'
        extName 'adaptivesearchsamplesaddon'
        extName 'adaptivesearchwebservices'
        extName 'commerceservicesbackoffice'
        extName 'solrfacetsearchbackoffice'
        extName 'solrserver'
        extName 'yacceleratorbackoffice'
        extName 'yacceleratorinitialdata'
        extName 'yacceleratorfulfilmentprocess'
        extName 'yacceleratorstorefront'
        extName 'ycommercewebservices'
        extName 'ycommercewebservicestest'

        extName 'apparelstore'
        extName 'electronicsstore'

        extName 'acceleratorwebservicesaddon'
        extName 'orderselfserviceaddon'

        extName 'customersupportbackoffice'
        extName 'customerticketingaddon'
        extName 'commerceorgsamplesaddon'

        extName 'rulebuilderbackoffice'
        extName 'couponbackoffice'
        extName 'droolsruleengineservices'
        extName 'couponfacades'
        extName 'promotionenginesamplesaddon'

        extName 'cmswebservices'
        extName 'smarteditwebservices'
        extName 'cmssmarteditwebservices'
        extName 'permissionswebservices'
        extName 'smarteditaddon'
        extName 'cmssmartedit'
        extName 'cmsoccaddon'

        extName 'previewpersonalizationweb'
        extName 'personalizationcmsweb'
        extName 'personalizationsmartedit'
        extName 'personalizationpromotionssmartedit'
        extName 'personalizationsampledataaddon'
        extName 'personalizationpromotionssampledataaddon'
        extName 'personalizationpromotions'
        extName 'personalizationpromotionsweb'
        extName 'personalizationservicesbackoffice'
        extName 'personalizationpromotionsbackoffice'
        extName 'personalizationcmsbackoffice'
        extName 'personalizationsearchbackoffice'
        extName 'personalizationsearchsmartedit'
        extName 'personalizationsearchweb'
        extName 'personalizationsearchsamplesaddon'

        extName 'textfieldconfiguratortemplatebackoffice'
        extName 'textfieldconfiguratortemplateaddon'
        extName 'assistedservicestorefront'
        extName 'assistedservicepromotionaddon'

        extName 'pcmbackofficesamplesaddon'

        /* integration-apis */
        extName 'outboundservices'
        extName 'odata2webservices'
        extName 'odata2webservicesfeaturetests'

        extName 'kymaintegrationbackoffice'
        extName 'kymaintegrationsampledata'
    }

    dbSetup {
        dbType 'hsqldb'
        dbUrl 'jdbc:hsqldb:hsql://hsql:9090/hybris;hsqldb.tx=MVCC'
        dbUser 'hybris'
        dbPassword 'hybris'
    }

    mediaStorageSettings {
        gridFsStorageStrategy {
            defaultStorageStrategy()
            host 'mongo'
            //userName - default is empty
            //password - default is empty
            //dbName - default is 'hybris_storage'
        }
    }

    clusterSettings {
        enableAutodiscovery()
        udpMulticast()
    }

    addons {
        forStoreFronts('yacceleratorstorefront') {
            names 'commerceorgsamplesaddon', 'promotionenginesamplesaddon', 'smarteditaddon', 'textfieldconfiguratortemplateaddon', 'assistedservicestorefront', 'assistedservicepromotionaddon', 'customerticketingaddon', 'orderselfserviceaddon', 'adaptivesearchsamplesaddon', 'pcmbackofficesamplesaddon', 'personalizationsearchsamplesaddon'
            template 'yacceleratorstorefront'
        }

        forStoreFronts('ycommercewebservices') {
            names 'acceleratorwebservicesaddon,cmsoccaddon'
            template 'ycommercewebservices'
        }
    }
}

def dpl = deployment('b2caccGridFs') {

    mongodb("${project.projectDir}/resources/mongodb/")

    hsqlImage('hsql') {
        properties {
            property 'port', '9090'
        }
    }

    platformImage('platform') {
        basedOn pl

        customTomcatFiles "${project.projectDir}/resources/mod-cluster-binaries"

        aspect('hac') {
            enabledWebApps 'hac', 'mediaweb'

            localProperties {
                property 'spring.session.enabled', 'true'
                property 'spring.session.hac.save', 'async'
                property 'spring.session.hac.cookie.name', 'JSESSIONID'
                property 'spring.session.hac.cookie.path', '/'
                property 'backofficesearch.cronjob.nodegroup', 'backoffice'
            }

            templatesProperties {
              property 'httpsConnectorEnabled', 'false'
              property 'serverXmlServerHook', '''<Listener className="org.jboss.modcluster.container.catalina.standalone.ModClusterListener" advertise="true" advertiseGroupAddress="${ENV::MOD_CLUSTER_ADDRESS_GROUP}" advertisePort="${ENV::MOD_CLUSTER_ADDRESS_PORT}" stickySession="true" stickySessionForce="false" stickySessionRemove="true" />'''
            }
        }

        aspect('backgroundProcessing')

        adminAspect({
            property 'backofficesearch.cronjob.nodegroup', 'backoffice'
        })

        aspect('accstorefront') {
            enabledWebApps 'yacceleratorstorefront', 'mediaweb', 'acceleratorservices'
            disableBackgroundProcessing()

            localProperties {
                property 'spring.session.enabled', 'true'
                property 'spring.session.yacceleratorstorefront.save', 'async'
                property 'spring.session.yacceleratorstorefront.cookie.name', 'JSESSIONID'
                property 'spring.session.yacceleratorstorefront.cookie.path', '/yacceleratorstorefront'
                property 'website.electronics.http', 'http://electronics.localhost/yacceleratorstorefront'
                property 'website.electronics.https', 'https://electronics.localhost/yacceleratorstorefront'
                property 'website.apparel-uk.http', 'http://apparel-uk.localhost/yacceleratorstorefront'
                property 'website.apparel-uk.https', 'https://apparel-uk.localhost/yacceleratorstorefront'
                property 'website.apparel-de.http', 'http://apparel-de.localhost/yacceleratorstorefront'
                property 'website.apparel-de.https', 'https://apparel-de.localhost/yacceleratorstorefront'
                property 'addonfilter.active', 'false'
            }

            templatesProperties {
              property 'httpsConnectorEnabled', 'false'
              property 'serverXmlServerHook', '''<Listener className="org.jboss.modcluster.container.catalina.standalone.ModClusterListener" advertise="true" advertiseGroupAddress="${ENV::MOD_CLUSTER_ADDRESS_GROUP}" advertisePort="${ENV::MOD_CLUSTER_ADDRESS_PORT}" stickySession="true" stickySessionForce="false" stickySessionRemove="true" />'''
            }
        }

        aspect('backoffice') {
            enabledWebApps 'backoffice', 'hac', 'mediaweb'

            localProperties {
                property 'spring.session.enabled', 'true'
                property 'spring.session.hac.save', 'async'
                property 'spring.session.hac.cookie.name', 'JSESSIONID'
                property 'spring.session.hac.cookie.path', '/'
                property 'task.engine.exclusive.mode', 'true'
                property 'cluster.node.groups', 'backoffice'
                property 'backofficesearch.cronjob.nodegroup', 'backoffice'
            }

            templatesProperties {
              property 'httpsConnectorEnabled', 'false'
              property 'serverXmlServerHook', '''<Listener className="org.jboss.modcluster.container.catalina.standalone.ModClusterListener" advertise="true" advertiseGroupAddress="${ENV::MOD_CLUSTER_ADDRESS_GROUP}" advertisePort="${ENV::MOD_CLUSTER_ADDRESS_PORT}" stickySession="true" stickySessionForce="false" stickySessionRemove="true" />'''
            }
        }
    }

}

String getSolrModeUrls() {
     if(project.hasProperty('solrMode')){
        solrMode == "cloud" ? "zookeeper1:2181,zookeeper2:2181,zookeeper3:2181" : "http://solr:8983/solr"
      } else {
        "http://solr:8983/solr"
      }
}

String getSolrModeConfig() {
    if(project.hasProperty('solrMode')){
        solrMode == "cloud" ? "cloud" : "standalone"
    } else {
        "standalone"
    }
}

task createImagesStructure {
    doLast {
        dpl.createImagesStructure()
    }
}

task buildImages(dependsOn: createImagesStructure) {
    doLast {
        dpl.buildImages()
    }
}
