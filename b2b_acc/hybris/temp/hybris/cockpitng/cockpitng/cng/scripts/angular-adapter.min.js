AngularCNG = function(moduleName, dependencies, dom) {

    this.$cng = new CockpitNG(dom);

    var id = this.$cng.id();
    this.moduleName = id + "_" + moduleName;

    try {
        this.module = angular.module(this.moduleName);
        this.module.adapter = this;
    } catch(e) {
        if (!dependencies) {
            dependencies = [];
        }

        this.module = angular.module(this.moduleName, dependencies);
        this.module.adapter = this;

        var module = this.module;
        this.module.directive("cngLocal", function($parse) {

            return {

                restrict: 'A',
                link: function($scope, elem, attr) {

                    var model = $parse(attr.cngLocal);
                    $(elem).html(model(module.adapter.cng().local()));

                }

            };

        });
        this.module.directive("cngGlobal", function($parse) {

            return {

                restrict: 'A',
                link: function($scope, elem, attr) {

                    var model = $parse(attr.cngGlobal);
                    $(elem).html(model(module.adapter.$cng.global()));

                }

            };

        });
        this.module.directive("cngSrc", function() {

            return {

                restrict: 'A',
                link: function($scope, elem, attr) {

                    var path = module.adapter.cng().relative(attr.cngSrc);
                    $(elem).attr("src", path);
                }
            }
        });
        this.module.directive("cngResource", function() {

            return {

                restrict: 'A',
                link: function($scope, elem, attr) {

                    var path = module.adapter.cng().absolute(attr.cngResource);
                    $(elem).attr("src", path);
                }
            }
        });
        this.module.directive("cngEvent", function($timeout) {

            return {

                restrict: 'E',
                scope: {
                    handler: '&handler'
                },
                link: function(scope, elem, attr) {

                    var type = attr.type;
                    var id = attr.id;
                    if (type === "socket") {
                        module.adapter.cng().socketEvent(id, function (socketId, socketData) {

                            $timeout(function() {

                                scope.handler({ socket: socketId, data: socketData });

                            }, 0);

                        });
                    } else if (type === "model") {
                        if (typeof(id) === "undefined") {
                            id = null;
                        }
                        module.adapter.cng().model(id, function (target, name, change) {

                            $timeout(function() {

                                scope.handler({model: target, property: name, value: change});

                            }, 0);

                        });
                    } else if (type === "ready") {
                        module.adapter.cng().ready(function () {

                            $timeout(function() {

                                scope.handler();

                            }, 0);

                        });
                    }

                }
            }

        });
    }

    var module = this.module;
    zk.afterMount(function() {

        angular.bootstrap(module.adapter.cng().root(), [module.adapter.moduleName]);

    });
};

AngularCNG.prototype.controller = function(dom, controller, services) {
    if (typeof(dom) === "function") {
        services = controller;
        controller = dom;
        dom = null;
    }
    if (!dom) {
        dom = CockpitNG.widgetRoot() || this.cng().root();
    }
    dom = CockpitNG.widgetRoot(dom, "[ng-controller]");
    var controllerName = dom.attributes["ng-controller"].nodeValue;
    if (!controller) {
        controller = AngularCNG.EmptyController;
    }

    if (!services) {
        services = [ "$scope" ];
    }
    services.push(controller);

    this.module.controller(controllerName, services);

    var _this = this;
    zk.afterMount(function() {

        var scope = angular.element(dom).scope();
        if (scope) {
            scope.$apply(function () {

                scope.model = _this.$cng.model();
                scope.settings = _this.$cng.settings();
                scope.sessionInfo = _this.$cng.getSessionInfo();
                scope.adapter = _this;

            });
        }

    });

    return this;
}

AngularCNG.prototype.initData = function(dom, injection) {
    if (!injection) {
        injection = dom;
        dom = null;
    }
    if (!dom) {
        dom = CockpitNG.widgetRoot() || this.cng().root();
    }
    var _this = this;
    dom = CockpitNG.widgetRoot(dom, "[ng-controller]");
    zk.afterMount(function() {

        var scope = angular.element(dom).scope();
        if (scope) {
            scope.$apply(function () {

                for (var key in injection) {
                    scope[key] = injection[key];
                }

            });
        }

    });

    return this;
}

AngularCNG.EmptyController = function() {

};

AngularCNG.prototype.cng = function() {
    return this.$cng;
};