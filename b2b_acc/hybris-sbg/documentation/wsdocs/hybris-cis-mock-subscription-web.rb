#
# 
#
# Generated by <a href="http://enunciate.webcohesion.com">Enunciate</a>.
#
require 'json'

# adding necessary json serialization methods to standard classes.
class Object
  def to_jaxb_json_hash
    return self
  end
  def self.from_json o
    return o
  end
end

class String
  def self.from_json o
    return o
  end
end

class Boolean
  def self.from_json o
    return o
  end
end

class Numeric
  def self.from_json o
    return o
  end
end

class Time
  #json time is represented as number of milliseconds since epoch
  def to_jaxb_json_hash
    return (to_i * 1000) + (usec / 1000)
  end
  def self.from_json o
    if o.nil?
      return nil
    else
      return Time.at(o / 1000, (o % 1000) * 1000)
    end
  end
end

class Array
  def to_jaxb_json_hash
    a = Array.new
    each { | _item | a.push _item.to_jaxb_json_hash }
    return a
  end
end

class Hash
  def to_jaxb_json_hash
    h = Hash.new
    each { | _key, _value | h[_key.to_jaxb_json_hash] = _value.to_jaxb_json_hash }
    return h
  end
end

module EnunciateHelpers
  LAMB_CLASS_AWARE = ->(_item) do
    java_clazz = _item['@class']
    clazz_array_parts = java_clazz.split('.')
    short_clazz = clazz_array_parts.pop
    clazz_package = clazz_array_parts.map do |e| e[0] = e.first.capitalize; e end.join("::")
    clazz = clazz_package + "::" + short_clazz
    Object.const_get(clazz).send(:from_json, _item)
  end
end


module Com

module Hybris

module Cis

module Api

module Subscription

module Model

  # (no documentation provided)
  class CisSubscriptionItem 

    # (no documentation provided)
    attr_accessor :subscriptionTerm
    # (no documentation provided)
    attr_accessor :vendorParameters
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :subscriptionPlan
    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :code

    # the json hash for this CisSubscriptionItem
    def to_jaxb_json_hash
      _h = {}
      _h['subscriptionTerm'] = subscriptionTerm.to_jaxb_json_hash unless subscriptionTerm.nil?
      _h['vendorParameters'] = vendorParameters.to_jaxb_json_hash unless vendorParameters.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['subscriptionPlan'] = subscriptionPlan.to_jaxb_json_hash unless subscriptionPlan.nil?
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['code'] = code.to_jaxb_json_hash unless code.nil?
      return _h
    end

    # the json (string form) for this CisSubscriptionItem
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this CisSubscriptionItem with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['subscriptionTerm'].nil?
          _oa = _o['subscriptionTerm']
            if(_oa.is_a? Hash)
              @subscriptionTerm = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @subscriptionTerm =  Com::Hybris::Cis::Api::Subscription::Model::CisTermsOfService.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @subscriptionTerm = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @subscriptionTerm.push Com::Hybris::Cis::Api::Subscription::Model::CisTermsOfService.from_json(_item)
                 else
                   @subscriptionTerm.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @subscriptionTerm = _oa
            end
          end
        if !_o['vendorParameters'].nil?
          _oa = _o['vendorParameters']
            if(_oa.is_a? Hash)
              @vendorParameters = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vendorParameters =  Com::Hybris::Cis::Api::Model::AnnotationHashMap.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vendorParameters = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vendorParameters.push Com::Hybris::Cis::Api::Model::AnnotationHashMap.from_json(_item)
                 else
                   @vendorParameters.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vendorParameters = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['subscriptionPlan'].nil?
          _oa = _o['subscriptionPlan']
            if(_oa.is_a? Hash)
              @subscriptionPlan = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @subscriptionPlan =  Com::Hybris::Cis::Api::Subscription::Model::CisSubscriptionPlan.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @subscriptionPlan = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @subscriptionPlan.push Com::Hybris::Cis::Api::Subscription::Model::CisSubscriptionPlan.from_json(_item)
                 else
                   @subscriptionPlan.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @subscriptionPlan = _oa
            end
          end
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push String.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['code'].nil?
          _oa = _o['code']
            if(_oa.is_a? Hash)
              @code = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @code =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @code = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @code.push String.from_json(_item)
                 else
                   @code.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @code = _oa
            end
          end
    end

    # constructs a CisSubscriptionItem from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Com

module Hybris

module Cis

module Api

module Subscription

module Model

  # (no documentation provided)
  class CisUsageChargeTier 

    # (no documentation provided)
    attr_accessor :numberOfUnits
    # (no documentation provided)
    attr_accessor :chargePrice

    # the json hash for this CisUsageChargeTier
    def to_jaxb_json_hash
      _h = {}
      _h['numberOfUnits'] = numberOfUnits.to_jaxb_json_hash unless numberOfUnits.nil?
      _h['chargePrice'] = chargePrice.to_jaxb_json_hash unless chargePrice.nil?
      return _h
    end

    # the json (string form) for this CisUsageChargeTier
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this CisUsageChargeTier with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['numberOfUnits'].nil?
          _oa = _o['numberOfUnits']
            if(_oa.is_a? Hash)
              @numberOfUnits = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @numberOfUnits =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @numberOfUnits = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @numberOfUnits.push Fixnum.from_json(_item)
                 else
                   @numberOfUnits.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @numberOfUnits = _oa
            end
          end
        if !_o['chargePrice'].nil?
          _oa = _o['chargePrice']
            if(_oa.is_a? Hash)
              @chargePrice = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @chargePrice =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @chargePrice = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @chargePrice.push Float.from_json(_item)
                 else
                   @chargePrice.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @chargePrice = _oa
            end
          end
    end

    # constructs a CisUsageChargeTier from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Com

module Hybris

module Cis

module Api

module Model

  # (no documentation provided)
  class CisAddress 

    # the addressLine1
    attr_accessor :addressLine1
    # the addressLine2
    attr_accessor :addressLine2
    # the addressLine3
    attr_accessor :addressLine3
    # the addressLine4
    attr_accessor :addressLine4
    # (no documentation provided)
    attr_accessor :longitude
    # (no documentation provided)
    attr_accessor :latitude
    # the zipCode
    attr_accessor :zipCode
    # the city
    attr_accessor :city
    # the state in 2 letter format
    attr_accessor :stateAsTwoLetter
    # the state
    attr_accessor :state
    # the country
    attr_accessor :country
    # the type
    attr_accessor :type
    # the firstName
    attr_accessor :firstName
    # the lastName
    attr_accessor :lastName
    # (no documentation provided)
    attr_accessor :email
    # (no documentation provided)
    attr_accessor :phone
    # (no documentation provided)
    attr_accessor :company
    # (no documentation provided)
    attr_accessor :facilityType
    # (no documentation provided)
    attr_accessor :facilityName
    # (no documentation provided)
    attr_accessor :faxNumber
    # (no documentation provided)
    attr_accessor :title
    # (no documentation provided)
    attr_accessor :vendorParameters

    # the json hash for this CisAddress
    def to_jaxb_json_hash
      _h = {}
      _h['addressLine1'] = addressLine1.to_jaxb_json_hash unless addressLine1.nil?
      _h['addressLine2'] = addressLine2.to_jaxb_json_hash unless addressLine2.nil?
      _h['addressLine3'] = addressLine3.to_jaxb_json_hash unless addressLine3.nil?
      _h['addressLine4'] = addressLine4.to_jaxb_json_hash unless addressLine4.nil?
      _h['longitude'] = longitude.to_jaxb_json_hash unless longitude.nil?
      _h['latitude'] = latitude.to_jaxb_json_hash unless latitude.nil?
      _h['zipCode'] = zipCode.to_jaxb_json_hash unless zipCode.nil?
      _h['city'] = city.to_jaxb_json_hash unless city.nil?
      _h['stateAsTwoLetter'] = stateAsTwoLetter.to_jaxb_json_hash unless stateAsTwoLetter.nil?
      _h['state'] = state.to_jaxb_json_hash unless state.nil?
      _h['country'] = country.to_jaxb_json_hash unless country.nil?
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      _h['firstName'] = firstName.to_jaxb_json_hash unless firstName.nil?
      _h['lastName'] = lastName.to_jaxb_json_hash unless lastName.nil?
      _h['email'] = email.to_jaxb_json_hash unless email.nil?
      _h['phone'] = phone.to_jaxb_json_hash unless phone.nil?
      _h['company'] = company.to_jaxb_json_hash unless company.nil?
      _h['facilityType'] = facilityType.to_jaxb_json_hash unless facilityType.nil?
      _h['facilityName'] = facilityName.to_jaxb_json_hash unless facilityName.nil?
      _h['faxNumber'] = faxNumber.to_jaxb_json_hash unless faxNumber.nil?
      _h['title'] = title.to_jaxb_json_hash unless title.nil?
      _h['vendorParameters'] = vendorParameters.to_jaxb_json_hash unless vendorParameters.nil?
      return _h
    end

    # the json (string form) for this CisAddress
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this CisAddress with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['addressLine1'].nil?
          _oa = _o['addressLine1']
            if(_oa.is_a? Hash)
              @addressLine1 = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @addressLine1 =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @addressLine1 = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @addressLine1.push String.from_json(_item)
                 else
                   @addressLine1.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @addressLine1 = _oa
            end
          end
        if !_o['addressLine2'].nil?
          _oa = _o['addressLine2']
            if(_oa.is_a? Hash)
              @addressLine2 = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @addressLine2 =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @addressLine2 = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @addressLine2.push String.from_json(_item)
                 else
                   @addressLine2.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @addressLine2 = _oa
            end
          end
        if !_o['addressLine3'].nil?
          _oa = _o['addressLine3']
            if(_oa.is_a? Hash)
              @addressLine3 = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @addressLine3 =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @addressLine3 = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @addressLine3.push String.from_json(_item)
                 else
                   @addressLine3.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @addressLine3 = _oa
            end
          end
        if !_o['addressLine4'].nil?
          _oa = _o['addressLine4']
            if(_oa.is_a? Hash)
              @addressLine4 = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @addressLine4 =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @addressLine4 = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @addressLine4.push String.from_json(_item)
                 else
                   @addressLine4.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @addressLine4 = _oa
            end
          end
        if !_o['longitude'].nil?
          _oa = _o['longitude']
            if(_oa.is_a? Hash)
              @longitude = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @longitude =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @longitude = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @longitude.push String.from_json(_item)
                 else
                   @longitude.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @longitude = _oa
            end
          end
        if !_o['latitude'].nil?
          _oa = _o['latitude']
            if(_oa.is_a? Hash)
              @latitude = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @latitude =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @latitude = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @latitude.push String.from_json(_item)
                 else
                   @latitude.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @latitude = _oa
            end
          end
        if !_o['zipCode'].nil?
          _oa = _o['zipCode']
            if(_oa.is_a? Hash)
              @zipCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @zipCode =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @zipCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @zipCode.push String.from_json(_item)
                 else
                   @zipCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @zipCode = _oa
            end
          end
        if !_o['city'].nil?
          _oa = _o['city']
            if(_oa.is_a? Hash)
              @city = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @city =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @city = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @city.push String.from_json(_item)
                 else
                   @city.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @city = _oa
            end
          end
        if !_o['stateAsTwoLetter'].nil?
          _oa = _o['stateAsTwoLetter']
            if(_oa.is_a? Hash)
              @stateAsTwoLetter = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @stateAsTwoLetter =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @stateAsTwoLetter = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @stateAsTwoLetter.push String.from_json(_item)
                 else
                   @stateAsTwoLetter.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @stateAsTwoLetter = _oa
            end
          end
        if !_o['state'].nil?
          _oa = _o['state']
            if(_oa.is_a? Hash)
              @state = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @state =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @state = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @state.push String.from_json(_item)
                 else
                   @state.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @state = _oa
            end
          end
        if !_o['country'].nil?
          _oa = _o['country']
            if(_oa.is_a? Hash)
              @country = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @country =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @country = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @country.push String.from_json(_item)
                 else
                   @country.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @country = _oa
            end
          end
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['firstName'].nil?
          _oa = _o['firstName']
            if(_oa.is_a? Hash)
              @firstName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @firstName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @firstName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @firstName.push String.from_json(_item)
                 else
                   @firstName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @firstName = _oa
            end
          end
        if !_o['lastName'].nil?
          _oa = _o['lastName']
            if(_oa.is_a? Hash)
              @lastName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lastName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lastName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lastName.push String.from_json(_item)
                 else
                   @lastName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lastName = _oa
            end
          end
        if !_o['email'].nil?
          _oa = _o['email']
            if(_oa.is_a? Hash)
              @email = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @email =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @email = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @email.push String.from_json(_item)
                 else
                   @email.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @email = _oa
            end
          end
        if !_o['phone'].nil?
          _oa = _o['phone']
            if(_oa.is_a? Hash)
              @phone = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @phone =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @phone = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @phone.push String.from_json(_item)
                 else
                   @phone.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @phone = _oa
            end
          end
        if !_o['company'].nil?
          _oa = _o['company']
            if(_oa.is_a? Hash)
              @company = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @company =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @company = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @company.push String.from_json(_item)
                 else
                   @company.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @company = _oa
            end
          end
        if !_o['facilityType'].nil?
          _oa = _o['facilityType']
            if(_oa.is_a? Hash)
              @facilityType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @facilityType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @facilityType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @facilityType.push String.from_json(_item)
                 else
                   @facilityType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @facilityType = _oa
            end
          end
        if !_o['facilityName'].nil?
          _oa = _o['facilityName']
            if(_oa.is_a? Hash)
              @facilityName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @facilityName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @facilityName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @facilityName.push String.from_json(_item)
                 else
                   @facilityName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @facilityName = _oa
            end
          end
        if !_o['faxNumber'].nil?
          _oa = _o['faxNumber']
            if(_oa.is_a? Hash)
              @faxNumber = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @faxNumber =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @faxNumber = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @faxNumber.push String.from_json(_item)
                 else
                   @faxNumber.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @faxNumber = _oa
            end
          end
        if !_o['title'].nil?
          _oa = _o['title']
            if(_oa.is_a? Hash)
              @title = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @title =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @title = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @title.push String.from_json(_item)
                 else
                   @title.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @title = _oa
            end
          end
        if !_o['vendorParameters'].nil?
          _oa = _o['vendorParameters']
            if(_oa.is_a? Hash)
              @vendorParameters = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vendorParameters =  Com::Hybris::Cis::Api::Model::AnnotationHashMap.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vendorParameters = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vendorParameters.push Com::Hybris::Cis::Api::Model::AnnotationHashMap.from_json(_item)
                 else
                   @vendorParameters.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vendorParameters = _oa
            end
          end
    end

    # constructs a CisAddress from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Com

module Hybris

module Cis

module Api

module Subscription

module Model

  # (no documentation provided)
  class CisCustomerUsageRequest 

    # (no documentation provided)
    attr_accessor :fromDate
    # (no documentation provided)
    attr_accessor :toDate
    # (no documentation provided)
    attr_accessor :customerId
    # (no documentation provided)
    attr_accessor :subscriptionId
    # (no documentation provided)
    attr_accessor :usageChargeName
    # (no documentation provided)
    attr_accessor :unitsConsumed

    # the json hash for this CisCustomerUsageRequest
    def to_jaxb_json_hash
      _h = {}
      _h['fromDate'] = fromDate.to_jaxb_json_hash unless fromDate.nil?
      _h['toDate'] = toDate.to_jaxb_json_hash unless toDate.nil?
      _h['customerId'] = customerId.to_jaxb_json_hash unless customerId.nil?
      _h['subscriptionId'] = subscriptionId.to_jaxb_json_hash unless subscriptionId.nil?
      _h['usageChargeName'] = usageChargeName.to_jaxb_json_hash unless usageChargeName.nil?
      _h['unitsConsumed'] = unitsConsumed.to_jaxb_json_hash unless unitsConsumed.nil?
      return _h
    end

    # the json (string form) for this CisCustomerUsageRequest
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this CisCustomerUsageRequest with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['fromDate'].nil?
          _oa = _o['fromDate']
            if(_oa.is_a? Hash)
              @fromDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @fromDate =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @fromDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @fromDate.push Time.from_json(_item)
                 else
                   @fromDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @fromDate = _oa
            end
          end
        if !_o['toDate'].nil?
          _oa = _o['toDate']
            if(_oa.is_a? Hash)
              @toDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @toDate =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @toDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @toDate.push Time.from_json(_item)
                 else
                   @toDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @toDate = _oa
            end
          end
        if !_o['customerId'].nil?
          _oa = _o['customerId']
            if(_oa.is_a? Hash)
              @customerId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @customerId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @customerId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @customerId.push String.from_json(_item)
                 else
                   @customerId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @customerId = _oa
            end
          end
        if !_o['subscriptionId'].nil?
          _oa = _o['subscriptionId']
            if(_oa.is_a? Hash)
              @subscriptionId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @subscriptionId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @subscriptionId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @subscriptionId.push String.from_json(_item)
                 else
                   @subscriptionId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @subscriptionId = _oa
            end
          end
        if !_o['usageChargeName'].nil?
          _oa = _o['usageChargeName']
            if(_oa.is_a? Hash)
              @usageChargeName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @usageChargeName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @usageChargeName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @usageChargeName.push String.from_json(_item)
                 else
                   @usageChargeName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @usageChargeName = _oa
            end
          end
        if !_o['unitsConsumed'].nil?
          _oa = _o['unitsConsumed']
            if(_oa.is_a? Hash)
              @unitsConsumed = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @unitsConsumed =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @unitsConsumed = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @unitsConsumed.push Float.from_json(_item)
                 else
                   @unitsConsumed.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @unitsConsumed = _oa
            end
          end
    end

    # constructs a CisCustomerUsageRequest from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Com

module Hybris

module Cis

module Api

module Model

  # (no documentation provided)
  class AnnotationHashMapEntryType 

    # (no documentation provided)
    attr_accessor :key
    # (no documentation provided)
    attr_accessor :value

    # the json hash for this AnnotationHashMapEntryType
    def to_jaxb_json_hash
      _h = {}
      _h['key'] = key.to_jaxb_json_hash unless key.nil?
      _h['value'] = value.to_jaxb_json_hash unless value.nil?
      return _h
    end

    # the json (string form) for this AnnotationHashMapEntryType
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this AnnotationHashMapEntryType with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['key'].nil?
          _oa = _o['key']
            if(_oa.is_a? Hash)
              @key = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @key =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @key = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @key.push String.from_json(_item)
                 else
                   @key.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @key = _oa
            end
          end
        if !_o['value'].nil?
          _oa = _o['value']
            if(_oa.is_a? Hash)
              @value = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @value =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @value = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @value.push String.from_json(_item)
                 else
                   @value.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @value = _oa
            end
          end
    end

    # constructs a AnnotationHashMapEntryType from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Com

module Hybris

module Cis

module Api

module Subscription

module Model

  # (no documentation provided)
  class CisSubscriptionBillingInfo 

    # the billingId
    attr_accessor :billingId
    # the billingPeriod
    attr_accessor :billingPeriod
    # the billingDate
    attr_accessor :billingDate
    # the amount
    attr_accessor :amount
    # the customFields
    attr_accessor :customFields
    # the status
    attr_accessor :status

    # the json hash for this CisSubscriptionBillingInfo
    def to_jaxb_json_hash
      _h = {}
      _h['billingId'] = billingId.to_jaxb_json_hash unless billingId.nil?
      _h['billingPeriod'] = billingPeriod.to_jaxb_json_hash unless billingPeriod.nil?
      _h['billingDate'] = billingDate.to_jaxb_json_hash unless billingDate.nil?
      _h['amount'] = amount.to_jaxb_json_hash unless amount.nil?
      _h['customFields'] = customFields.to_jaxb_json_hash unless customFields.nil?
      _h['status'] = status.to_jaxb_json_hash unless status.nil?
      return _h
    end

    # the json (string form) for this CisSubscriptionBillingInfo
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this CisSubscriptionBillingInfo with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['billingId'].nil?
          _oa = _o['billingId']
            if(_oa.is_a? Hash)
              @billingId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @billingId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @billingId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @billingId.push String.from_json(_item)
                 else
                   @billingId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @billingId = _oa
            end
          end
        if !_o['billingPeriod'].nil?
          _oa = _o['billingPeriod']
            if(_oa.is_a? Hash)
              @billingPeriod = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @billingPeriod =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @billingPeriod = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @billingPeriod.push String.from_json(_item)
                 else
                   @billingPeriod.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @billingPeriod = _oa
            end
          end
        if !_o['billingDate'].nil?
          _oa = _o['billingDate']
            if(_oa.is_a? Hash)
              @billingDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @billingDate =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @billingDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @billingDate.push String.from_json(_item)
                 else
                   @billingDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @billingDate = _oa
            end
          end
        if !_o['amount'].nil?
          _oa = _o['amount']
            if(_oa.is_a? Hash)
              @amount = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @amount =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @amount = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @amount.push String.from_json(_item)
                 else
                   @amount.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @amount = _oa
            end
          end
        if !_o['customFields'].nil?
          _oa = _o['customFields']
            if(_oa.is_a? Hash)
              @customFields = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @customFields =  Com::Hybris::Cis::Api::Model::AnnotationHashMap.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @customFields = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @customFields.push Com::Hybris::Cis::Api::Model::AnnotationHashMap.from_json(_item)
                 else
                   @customFields.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @customFields = _oa
            end
          end
        if !_o['status'].nil?
          _oa = _o['status']
            if(_oa.is_a? Hash)
              @status = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @status =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @status = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @status.push String.from_json(_item)
                 else
                   @status.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @status = _oa
            end
          end
    end

    # constructs a CisSubscriptionBillingInfo from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Com

module Hybris

module Cis

module Api

module Subscription

module Model

  # (no documentation provided)
  class CisTermsOfService 

    # (no documentation provided)
    attr_accessor :frequency
    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :billingCycleDay
    # (no documentation provided)
    attr_accessor :billingPlanName
    # (no documentation provided)
    attr_accessor :cancellable
    # (no documentation provided)
    attr_accessor :vendorParameters
    # (no documentation provided)
    attr_accessor :billingFrequency
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :billingPlanId
    # (no documentation provided)
    attr_accessor :autoRenewal
    # (no documentation provided)
    attr_accessor :number

    # the json hash for this CisTermsOfService
    def to_jaxb_json_hash
      _h = {}
      _h['frequency'] = frequency.to_jaxb_json_hash unless frequency.nil?
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['billingCycleDay'] = billingCycleDay.to_jaxb_json_hash unless billingCycleDay.nil?
      _h['billingPlanName'] = billingPlanName.to_jaxb_json_hash unless billingPlanName.nil?
      _h['cancellable'] = cancellable.to_jaxb_json_hash unless cancellable.nil?
      _h['vendorParameters'] = vendorParameters.to_jaxb_json_hash unless vendorParameters.nil?
      _h['billingFrequency'] = billingFrequency.to_jaxb_json_hash unless billingFrequency.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['billingPlanId'] = billingPlanId.to_jaxb_json_hash unless billingPlanId.nil?
      _h['autoRenewal'] = autoRenewal.to_jaxb_json_hash unless autoRenewal.nil?
      _h['number'] = number.to_jaxb_json_hash unless number.nil?
      return _h
    end

    # the json (string form) for this CisTermsOfService
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this CisTermsOfService with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['frequency'].nil?
          _oa = _o['frequency']
            if(_oa.is_a? Hash)
              @frequency = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @frequency =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @frequency = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @frequency.push String.from_json(_item)
                 else
                   @frequency.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @frequency = _oa
            end
          end
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push String.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['billingCycleDay'].nil?
          _oa = _o['billingCycleDay']
            if(_oa.is_a? Hash)
              @billingCycleDay = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @billingCycleDay =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @billingCycleDay = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @billingCycleDay.push Fixnum.from_json(_item)
                 else
                   @billingCycleDay.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @billingCycleDay = _oa
            end
          end
        if !_o['billingPlanName'].nil?
          _oa = _o['billingPlanName']
            if(_oa.is_a? Hash)
              @billingPlanName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @billingPlanName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @billingPlanName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @billingPlanName.push String.from_json(_item)
                 else
                   @billingPlanName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @billingPlanName = _oa
            end
          end
        if !_o['cancellable'].nil?
          _oa = _o['cancellable']
            if(_oa.is_a? Hash)
              @cancellable = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cancellable =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cancellable = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cancellable.push Boolean.from_json(_item)
                 else
                   @cancellable.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cancellable = _oa
            end
          end
        if !_o['vendorParameters'].nil?
          _oa = _o['vendorParameters']
            if(_oa.is_a? Hash)
              @vendorParameters = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vendorParameters =  Com::Hybris::Cis::Api::Model::AnnotationHashMap.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vendorParameters = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vendorParameters.push Com::Hybris::Cis::Api::Model::AnnotationHashMap.from_json(_item)
                 else
                   @vendorParameters.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vendorParameters = _oa
            end
          end
        if !_o['billingFrequency'].nil?
          _oa = _o['billingFrequency']
            if(_oa.is_a? Hash)
              @billingFrequency = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @billingFrequency =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @billingFrequency = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @billingFrequency.push String.from_json(_item)
                 else
                   @billingFrequency.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @billingFrequency = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['billingPlanId'].nil?
          _oa = _o['billingPlanId']
            if(_oa.is_a? Hash)
              @billingPlanId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @billingPlanId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @billingPlanId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @billingPlanId.push String.from_json(_item)
                 else
                   @billingPlanId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @billingPlanId = _oa
            end
          end
        if !_o['autoRenewal'].nil?
          _oa = _o['autoRenewal']
            if(_oa.is_a? Hash)
              @autoRenewal = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @autoRenewal =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @autoRenewal = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @autoRenewal.push Boolean.from_json(_item)
                 else
                   @autoRenewal.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @autoRenewal = _oa
            end
          end
        if !_o['number'].nil?
          _oa = _o['number']
            if(_oa.is_a? Hash)
              @number = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @number =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @number = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @number.push Fixnum.from_json(_item)
                 else
                   @number.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @number = _oa
            end
          end
    end

    # constructs a CisTermsOfService from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Com

module Hybris

module Cis

module Api

module Subscription

module Model

  # (no documentation provided)
  class CisUsageCharge 

    # (no documentation provided)
    attr_accessor :type
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :unitId
    # (no documentation provided)
    attr_accessor :tiers

    # the json hash for this CisUsageCharge
    def to_jaxb_json_hash
      _h = {}
      _h['type'] = type.to_jaxb_json_hash unless type.nil?
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['unitId'] = unitId.to_jaxb_json_hash unless unitId.nil?
      if !tiers.nil?
        _ha = Array.new
        tiers.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['tiers'] = _ha
      end
      return _h
    end

    # the json (string form) for this CisUsageCharge
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this CisUsageCharge with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['type'].nil?
          _oa = _o['type']
            if(_oa.is_a? Hash)
              @type = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @type =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @type = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @type.push String.from_json(_item)
                 else
                   @type.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @type = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['unitId'].nil?
          _oa = _o['unitId']
            if(_oa.is_a? Hash)
              @unitId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @unitId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @unitId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @unitId.push String.from_json(_item)
                 else
                   @unitId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @unitId = _oa
            end
          end
        if !_o['tiers'].nil?
          _oa = _o['tiers']
            if(_oa.is_a? Hash)
              @tiers = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @tiers =  Com::Hybris::Cis::Api::Subscription::Model::CisUsageChargeTier.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @tiers = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @tiers.push Com::Hybris::Cis::Api::Subscription::Model::CisUsageChargeTier.from_json(_item)
                 else
                   @tiers.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @tiers = _oa
            end
          end
    end

    # constructs a CisUsageCharge from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Com

module Hybris

module Cis

module Api

module Model

  # (no documentation provided)
  class CisLineItem 

    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :vendorParameters
    # (no documentation provided)
    attr_accessor :unitPrice
    # (no documentation provided)
    attr_accessor :itemCode
    # (no documentation provided)
    attr_accessor :quantity
    # (no documentation provided)
    attr_accessor :productDescription
    # (no documentation provided)
    attr_accessor :taxCode

    # the json hash for this CisLineItem
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['vendorParameters'] = vendorParameters.to_jaxb_json_hash unless vendorParameters.nil?
      _h['unitPrice'] = unitPrice.to_jaxb_json_hash unless unitPrice.nil?
      _h['itemCode'] = itemCode.to_jaxb_json_hash unless itemCode.nil?
      _h['quantity'] = quantity.to_jaxb_json_hash unless quantity.nil?
      _h['productDescription'] = productDescription.to_jaxb_json_hash unless productDescription.nil?
      _h['taxCode'] = taxCode.to_jaxb_json_hash unless taxCode.nil?
      return _h
    end

    # the json (string form) for this CisLineItem
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this CisLineItem with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push Fixnum.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['vendorParameters'].nil?
          _oa = _o['vendorParameters']
            if(_oa.is_a? Hash)
              @vendorParameters = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vendorParameters =  Com::Hybris::Cis::Api::Model::AnnotationHashMap.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vendorParameters = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vendorParameters.push Com::Hybris::Cis::Api::Model::AnnotationHashMap.from_json(_item)
                 else
                   @vendorParameters.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vendorParameters = _oa
            end
          end
        if !_o['unitPrice'].nil?
          _oa = _o['unitPrice']
            if(_oa.is_a? Hash)
              @unitPrice = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @unitPrice =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @unitPrice = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @unitPrice.push Float.from_json(_item)
                 else
                   @unitPrice.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @unitPrice = _oa
            end
          end
        if !_o['itemCode'].nil?
          _oa = _o['itemCode']
            if(_oa.is_a? Hash)
              @itemCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @itemCode =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @itemCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @itemCode.push String.from_json(_item)
                 else
                   @itemCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @itemCode = _oa
            end
          end
        if !_o['quantity'].nil?
          _oa = _o['quantity']
            if(_oa.is_a? Hash)
              @quantity = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @quantity =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @quantity = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @quantity.push Fixnum.from_json(_item)
                 else
                   @quantity.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @quantity = _oa
            end
          end
        if !_o['productDescription'].nil?
          _oa = _o['productDescription']
            if(_oa.is_a? Hash)
              @productDescription = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @productDescription =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @productDescription = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @productDescription.push String.from_json(_item)
                 else
                   @productDescription.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @productDescription = _oa
            end
          end
        if !_o['taxCode'].nil?
          _oa = _o['taxCode']
            if(_oa.is_a? Hash)
              @taxCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @taxCode =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @taxCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @taxCode.push String.from_json(_item)
                 else
                   @taxCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @taxCode = _oa
            end
          end
    end

    # constructs a CisLineItem from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Com

module Hybris

module Cis

module Api

module Subscription

module Model

  # (no documentation provided)
  class CisSubscriptionOrder 

    # the items
    attr_accessor :items
    # the id
    attr_accessor :id
    # the date
    attr_accessor :date
    # the currency
    attr_accessor :currency
    # the addresses
    attr_accessor :addresses
    # the lineItems
    attr_accessor :lineItems
    # the vendorParameters
    attr_accessor :vendorParameters
    # the merchantAccountId
    attr_accessor :merchantAccountId

    # the json hash for this CisSubscriptionOrder
    def to_jaxb_json_hash
      _h = {}
      if !items.nil?
        _ha = Array.new
        items.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['items'] = _ha
      end
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['date'] = date.to_jaxb_json_hash unless date.nil?
      _h['currency'] = currency.to_jaxb_json_hash unless currency.nil?
      if !addresses.nil?
        _ha = Array.new
        addresses.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['addresses'] = _ha
      end
      if !lineItems.nil?
        _ha = Array.new
        lineItems.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['lineItems'] = _ha
      end
      _h['vendorParameters'] = vendorParameters.to_jaxb_json_hash unless vendorParameters.nil?
      _h['merchantAccountId'] = merchantAccountId.to_jaxb_json_hash unless merchantAccountId.nil?
      return _h
    end

    # the json (string form) for this CisSubscriptionOrder
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this CisSubscriptionOrder with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['items'].nil?
          _oa = _o['items']
            if(_oa.is_a? Hash)
              @items = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @items =  Com::Hybris::Cis::Api::Subscription::Model::CisSubscriptionItem.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @items = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @items.push Com::Hybris::Cis::Api::Subscription::Model::CisSubscriptionItem.from_json(_item)
                 else
                   @items.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @items = _oa
            end
          end
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push String.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['date'].nil?
          _oa = _o['date']
            if(_oa.is_a? Hash)
              @date = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @date =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @date = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @date.push Time.from_json(_item)
                 else
                   @date.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @date = _oa
            end
          end
        if !_o['currency'].nil?
          _oa = _o['currency']
            if(_oa.is_a? Hash)
              @currency = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @currency =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @currency = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @currency.push String.from_json(_item)
                 else
                   @currency.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @currency = _oa
            end
          end
        if !_o['addresses'].nil?
          _oa = _o['addresses']
            if(_oa.is_a? Hash)
              @addresses = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @addresses =  Com::Hybris::Cis::Api::Model::CisAddress.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @addresses = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @addresses.push Com::Hybris::Cis::Api::Model::CisAddress.from_json(_item)
                 else
                   @addresses.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @addresses = _oa
            end
          end
        if !_o['lineItems'].nil?
          _oa = _o['lineItems']
            if(_oa.is_a? Hash)
              @lineItems = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lineItems =  Com::Hybris::Cis::Api::Model::CisLineItem.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lineItems = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lineItems.push Com::Hybris::Cis::Api::Model::CisLineItem.from_json(_item)
                 else
                   @lineItems.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lineItems = _oa
            end
          end
        if !_o['vendorParameters'].nil?
          _oa = _o['vendorParameters']
            if(_oa.is_a? Hash)
              @vendorParameters = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vendorParameters =  Com::Hybris::Cis::Api::Model::AnnotationHashMap.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vendorParameters = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vendorParameters.push Com::Hybris::Cis::Api::Model::AnnotationHashMap.from_json(_item)
                 else
                   @vendorParameters.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vendorParameters = _oa
            end
          end
        if !_o['merchantAccountId'].nil?
          _oa = _o['merchantAccountId']
            if(_oa.is_a? Hash)
              @merchantAccountId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @merchantAccountId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @merchantAccountId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @merchantAccountId.push String.from_json(_item)
                 else
                   @merchantAccountId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @merchantAccountId = _oa
            end
          end
    end

    # constructs a CisSubscriptionOrder from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Com

module Hybris

module Cis

module Api

module Subscription

module Model

  # (no documentation provided)
  class CisSubscriptionRequest 

    # vendor specific parameters
    attr_accessor :parameters

    # the json hash for this CisSubscriptionRequest
    def to_jaxb_json_hash
      _h = {}
      _h['parameters'] = parameters.to_jaxb_json_hash unless parameters.nil?
      return _h
    end

    # the json (string form) for this CisSubscriptionRequest
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this CisSubscriptionRequest with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['parameters'].nil?
          _oa = _o['parameters']
            if(_oa.is_a? Hash)
              @parameters = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @parameters =  Com::Hybris::Cis::Api::Model::AnnotationHashMap.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @parameters = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @parameters.push Com::Hybris::Cis::Api::Model::AnnotationHashMap.from_json(_item)
                 else
                   @parameters.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @parameters = _oa
            end
          end
    end

    # constructs a CisSubscriptionRequest from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Com

module Hybris

module Cis

module Api

module Subscription

module Model

  # (no documentation provided)
  class CisSubscriptionPlan 

    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :usageCharges
    # (no documentation provided)
    attr_accessor :name
    # (no documentation provided)
    attr_accessor :vendorParameters
    # (no documentation provided)
    attr_accessor :charges

    # the json hash for this CisSubscriptionPlan
    def to_jaxb_json_hash
      _h = {}
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      if !usageCharges.nil?
        _ha = Array.new
        usageCharges.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['usageCharges'] = _ha
      end
      _h['name'] = name.to_jaxb_json_hash unless name.nil?
      _h['vendorParameters'] = vendorParameters.to_jaxb_json_hash unless vendorParameters.nil?
      if !charges.nil?
        _ha = Array.new
        charges.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['charges'] = _ha
      end
      return _h
    end

    # the json (string form) for this CisSubscriptionPlan
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this CisSubscriptionPlan with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push String.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['usageCharges'].nil?
          _oa = _o['usageCharges']
            if(_oa.is_a? Hash)
              @usageCharges = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @usageCharges =  Com::Hybris::Cis::Api::Subscription::Model::CisUsageCharge.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @usageCharges = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @usageCharges.push Com::Hybris::Cis::Api::Subscription::Model::CisUsageCharge.from_json(_item)
                 else
                   @usageCharges.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @usageCharges = _oa
            end
          end
        if !_o['name'].nil?
          _oa = _o['name']
            if(_oa.is_a? Hash)
              @name = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @name =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @name = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @name.push String.from_json(_item)
                 else
                   @name.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @name = _oa
            end
          end
        if !_o['vendorParameters'].nil?
          _oa = _o['vendorParameters']
            if(_oa.is_a? Hash)
              @vendorParameters = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vendorParameters =  Com::Hybris::Cis::Api::Model::AnnotationHashMap.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vendorParameters = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vendorParameters.push Com::Hybris::Cis::Api::Model::AnnotationHashMap.from_json(_item)
                 else
                   @vendorParameters.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vendorParameters = _oa
            end
          end
        if !_o['charges'].nil?
          _oa = _o['charges']
            if(_oa.is_a? Hash)
              @charges = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @charges =  Com::Hybris::Cis::Api::Subscription::Model::CisChargeEntry.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @charges = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @charges.push Com::Hybris::Cis::Api::Subscription::Model::CisChargeEntry.from_json(_item)
                 else
                   @charges.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @charges = _oa
            end
          end
    end

    # constructs a CisSubscriptionPlan from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Com

module Hybris

module Cis

module Api

module Subscription

module Model

  # (no documentation provided)
  class CisPaymentMethod 

    # (no documentation provided)
    attr_accessor :enabled
    # (no documentation provided)
    attr_accessor :cardType
    # (no documentation provided)
    attr_accessor :merchantPaymentMethodId
    # (no documentation provided)
    attr_accessor :cardHolder
    # (no documentation provided)
    attr_accessor :billingAddress
    # (no documentation provided)
    attr_accessor :ccNumber
    # (no documentation provided)
    attr_accessor :expirationYear
    # (no documentation provided)
    attr_accessor :expirationMonth

    # the json hash for this CisPaymentMethod
    def to_jaxb_json_hash
      _h = {}
      _h['enabled'] = enabled.to_jaxb_json_hash unless enabled.nil?
      _h['cardType'] = cardType.to_jaxb_json_hash unless cardType.nil?
      _h['merchantPaymentMethodId'] = merchantPaymentMethodId.to_jaxb_json_hash unless merchantPaymentMethodId.nil?
      _h['cardHolder'] = cardHolder.to_jaxb_json_hash unless cardHolder.nil?
      _h['billingAddress'] = billingAddress.to_jaxb_json_hash unless billingAddress.nil?
      _h['ccNumber'] = ccNumber.to_jaxb_json_hash unless ccNumber.nil?
      _h['expirationYear'] = expirationYear.to_jaxb_json_hash unless expirationYear.nil?
      _h['expirationMonth'] = expirationMonth.to_jaxb_json_hash unless expirationMonth.nil?
      return _h
    end

    # the json (string form) for this CisPaymentMethod
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this CisPaymentMethod with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['enabled'].nil?
          _oa = _o['enabled']
            if(_oa.is_a? Hash)
              @enabled = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @enabled =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @enabled = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @enabled.push Boolean.from_json(_item)
                 else
                   @enabled.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @enabled = _oa
            end
          end
        if !_o['cardType'].nil?
          _oa = _o['cardType']
            if(_oa.is_a? Hash)
              @cardType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cardType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cardType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cardType.push String.from_json(_item)
                 else
                   @cardType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cardType = _oa
            end
          end
        if !_o['merchantPaymentMethodId'].nil?
          _oa = _o['merchantPaymentMethodId']
            if(_oa.is_a? Hash)
              @merchantPaymentMethodId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @merchantPaymentMethodId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @merchantPaymentMethodId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @merchantPaymentMethodId.push String.from_json(_item)
                 else
                   @merchantPaymentMethodId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @merchantPaymentMethodId = _oa
            end
          end
        if !_o['cardHolder'].nil?
          _oa = _o['cardHolder']
            if(_oa.is_a? Hash)
              @cardHolder = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cardHolder =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cardHolder = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cardHolder.push String.from_json(_item)
                 else
                   @cardHolder.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cardHolder = _oa
            end
          end
        if !_o['billingAddress'].nil?
          _oa = _o['billingAddress']
            if(_oa.is_a? Hash)
              @billingAddress = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @billingAddress =  Com::Hybris::Cis::Api::Model::CisAddress.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @billingAddress = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @billingAddress.push Com::Hybris::Cis::Api::Model::CisAddress.from_json(_item)
                 else
                   @billingAddress.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @billingAddress = _oa
            end
          end
        if !_o['ccNumber'].nil?
          _oa = _o['ccNumber']
            if(_oa.is_a? Hash)
              @ccNumber = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ccNumber =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ccNumber = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ccNumber.push String.from_json(_item)
                 else
                   @ccNumber.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ccNumber = _oa
            end
          end
        if !_o['expirationYear'].nil?
          _oa = _o['expirationYear']
            if(_oa.is_a? Hash)
              @expirationYear = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @expirationYear =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @expirationYear = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @expirationYear.push Fixnum.from_json(_item)
                 else
                   @expirationYear.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @expirationYear = _oa
            end
          end
        if !_o['expirationMonth'].nil?
          _oa = _o['expirationMonth']
            if(_oa.is_a? Hash)
              @expirationMonth = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @expirationMonth =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @expirationMonth = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @expirationMonth.push Fixnum.from_json(_item)
                 else
                   @expirationMonth.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @expirationMonth = _oa
            end
          end
    end

    # constructs a CisPaymentMethod from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Com

module Hybris

module Cis

module Api

module Subscription

module Model

  # (no documentation provided)
  class CisChargeEntry 

    # (no documentation provided)
    attr_accessor :vendorParameters
    # (no documentation provided)
    attr_accessor :oneTimeChargeTime
    # (no documentation provided)
    attr_accessor :numberOfCycles
    # (no documentation provided)
    attr_accessor :chargePrice

    # the json hash for this CisChargeEntry
    def to_jaxb_json_hash
      _h = {}
      _h['vendorParameters'] = vendorParameters.to_jaxb_json_hash unless vendorParameters.nil?
      _h['oneTimeChargeTime'] = oneTimeChargeTime.to_jaxb_json_hash unless oneTimeChargeTime.nil?
      _h['numberOfCycles'] = numberOfCycles.to_jaxb_json_hash unless numberOfCycles.nil?
      _h['chargePrice'] = chargePrice.to_jaxb_json_hash unless chargePrice.nil?
      return _h
    end

    # the json (string form) for this CisChargeEntry
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this CisChargeEntry with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['vendorParameters'].nil?
          _oa = _o['vendorParameters']
            if(_oa.is_a? Hash)
              @vendorParameters = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vendorParameters =  Com::Hybris::Cis::Api::Model::AnnotationHashMap.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vendorParameters = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vendorParameters.push Com::Hybris::Cis::Api::Model::AnnotationHashMap.from_json(_item)
                 else
                   @vendorParameters.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vendorParameters = _oa
            end
          end
        if !_o['oneTimeChargeTime'].nil?
          _oa = _o['oneTimeChargeTime']
            if(_oa.is_a? Hash)
              @oneTimeChargeTime = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @oneTimeChargeTime =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @oneTimeChargeTime = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @oneTimeChargeTime.push String.from_json(_item)
                 else
                   @oneTimeChargeTime.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @oneTimeChargeTime = _oa
            end
          end
        if !_o['numberOfCycles'].nil?
          _oa = _o['numberOfCycles']
            if(_oa.is_a? Hash)
              @numberOfCycles = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @numberOfCycles =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @numberOfCycles = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @numberOfCycles.push Fixnum.from_json(_item)
                 else
                   @numberOfCycles.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @numberOfCycles = _oa
            end
          end
        if !_o['chargePrice'].nil?
          _oa = _o['chargePrice']
            if(_oa.is_a? Hash)
              @chargePrice = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @chargePrice =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @chargePrice = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @chargePrice.push Float.from_json(_item)
                 else
                   @chargePrice.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @chargePrice = _oa
            end
          end
    end

    # constructs a CisChargeEntry from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Com

module Hybris

module Cis

module Api

module Model

  # (no documentation provided)
  class AnnotationHashMap 

    # (no documentation provided)
    attr_accessor :entries
    # (no documentation provided)
    attr_accessor :map

    # the json hash for this AnnotationHashMap
    def to_jaxb_json_hash
      _h = {}
      if !entries.nil?
        _ha = Array.new
        entries.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['entries'] = _ha
      end
      _h['map'] = map.to_jaxb_json_hash unless map.nil?
      return _h
    end

    # the json (string form) for this AnnotationHashMap
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this AnnotationHashMap with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['entries'].nil?
          _oa = _o['entries']
            if(_oa.is_a? Hash)
              @entries = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @entries =  Com::Hybris::Cis::Api::Model::AnnotationHashMapEntryType.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @entries = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @entries.push Com::Hybris::Cis::Api::Model::AnnotationHashMapEntryType.from_json(_item)
                 else
                   @entries.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @entries = _oa
            end
          end
        if !_o['map'].nil?
          _oa = _o['map']
            if(_oa.is_a? Hash)
              @map = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @map =  Hash.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @map = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @map.push Hash.from_json(_item)
                 else
                   @map.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @map = _oa
            end
          end
    end

    # constructs a AnnotationHashMap from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Com

module Hybris

module Cis

module Api

module Model

  # (no documentation provided)
  class CisResult 

    # (no documentation provided)
    attr_accessor :clientRefId
    # (no documentation provided)
    attr_accessor :vendorStatusCode
    # (no documentation provided)
    attr_accessor :id
    # (no documentation provided)
    attr_accessor :decision
    # (no documentation provided)
    attr_accessor :vendorId
    # (no documentation provided)
    attr_accessor :href
    # (no documentation provided)
    attr_accessor :vendorReasonCode
    # (no documentation provided)
    attr_accessor :vendorResponses

    # the json hash for this CisResult
    def to_jaxb_json_hash
      _h = {}
      _h['clientRefId'] = clientRefId.to_jaxb_json_hash unless clientRefId.nil?
      _h['vendorStatusCode'] = vendorStatusCode.to_jaxb_json_hash unless vendorStatusCode.nil?
      _h['id'] = id.to_jaxb_json_hash unless id.nil?
      _h['decision'] = decision.to_jaxb_json_hash unless decision.nil?
      _h['vendorId'] = vendorId.to_jaxb_json_hash unless vendorId.nil?
      _h['href'] = href.to_jaxb_json_hash unless href.nil?
      _h['vendorReasonCode'] = vendorReasonCode.to_jaxb_json_hash unless vendorReasonCode.nil?
      _h['vendorResponses'] = vendorResponses.to_jaxb_json_hash unless vendorResponses.nil?
      return _h
    end

    # the json (string form) for this CisResult
    def to_json
      to_jaxb_json_hash.to_json
    end

    #initializes this CisResult with a json hash
    def init_jaxb_json_hash(_o)
        if !_o['clientRefId'].nil?
          _oa = _o['clientRefId']
            if(_oa.is_a? Hash)
              @clientRefId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @clientRefId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @clientRefId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @clientRefId.push String.from_json(_item)
                 else
                   @clientRefId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @clientRefId = _oa
            end
          end
        if !_o['vendorStatusCode'].nil?
          _oa = _o['vendorStatusCode']
            if(_oa.is_a? Hash)
              @vendorStatusCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vendorStatusCode =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vendorStatusCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vendorStatusCode.push String.from_json(_item)
                 else
                   @vendorStatusCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vendorStatusCode = _oa
            end
          end
        if !_o['id'].nil?
          _oa = _o['id']
            if(_oa.is_a? Hash)
              @id = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @id =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @id = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @id.push String.from_json(_item)
                 else
                   @id.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @id = _oa
            end
          end
        if !_o['decision'].nil?
          _oa = _o['decision']
            if(_oa.is_a? Hash)
              @decision = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @decision =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @decision = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @decision.push String.from_json(_item)
                 else
                   @decision.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @decision = _oa
            end
          end
        if !_o['vendorId'].nil?
          _oa = _o['vendorId']
            if(_oa.is_a? Hash)
              @vendorId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vendorId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vendorId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vendorId.push String.from_json(_item)
                 else
                   @vendorId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vendorId = _oa
            end
          end
        if !_o['href'].nil?
          _oa = _o['href']
            if(_oa.is_a? Hash)
              @href = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @href =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @href = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @href.push String.from_json(_item)
                 else
                   @href.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @href = _oa
            end
          end
        if !_o['vendorReasonCode'].nil?
          _oa = _o['vendorReasonCode']
            if(_oa.is_a? Hash)
              @vendorReasonCode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vendorReasonCode =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vendorReasonCode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vendorReasonCode.push String.from_json(_item)
                 else
                   @vendorReasonCode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vendorReasonCode = _oa
            end
          end
        if !_o['vendorResponses'].nil?
          _oa = _o['vendorResponses']
            if(_oa.is_a? Hash)
              @vendorResponses = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @vendorResponses =  Com::Hybris::Cis::Api::Model::AnnotationHashMap.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @vendorResponses = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @vendorResponses.push Com::Hybris::Cis::Api::Model::AnnotationHashMap.from_json(_item)
                 else
                   @vendorResponses.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @vendorResponses = _oa
            end
          end
    end

    # constructs a CisResult from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

module Com

module Hybris

module Cis

module Api

module Subscription

module Model

  # (no documentation provided)
  class CisSubscriptionBillingActivityList < Com::Hybris::Cis::Api::Model::CisResult 

    # the merchantSubscriptionId
    attr_accessor :merchantSubscriptionId
    # the billings
    attr_accessor :billings

    # the json hash for this CisSubscriptionBillingActivityList
    def to_jaxb_json_hash
      _h = super
      _h['merchantSubscriptionId'] = merchantSubscriptionId.to_jaxb_json_hash unless merchantSubscriptionId.nil?
      if !billings.nil?
        _ha = Array.new
        billings.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['billings'] = _ha
      end
      return _h
    end

    #initializes this CisSubscriptionBillingActivityList with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['merchantSubscriptionId'].nil?
          _oa = _o['merchantSubscriptionId']
            if(_oa.is_a? Hash)
              @merchantSubscriptionId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @merchantSubscriptionId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @merchantSubscriptionId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @merchantSubscriptionId.push String.from_json(_item)
                 else
                   @merchantSubscriptionId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @merchantSubscriptionId = _oa
            end
          end
        if !_o['billings'].nil?
          _oa = _o['billings']
            if(_oa.is_a? Hash)
              @billings = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @billings =  Com::Hybris::Cis::Api::Subscription::Model::CisSubscriptionBillingInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @billings = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @billings.push Com::Hybris::Cis::Api::Subscription::Model::CisSubscriptionBillingInfo.from_json(_item)
                 else
                   @billings.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @billings = _oa
            end
          end
    end

    # constructs a CisSubscriptionBillingActivityList from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Com

module Hybris

module Cis

module Api

module Subscription

module Model

  # (no documentation provided)
  class CisChangePaymentMethodRequest < Com::Hybris::Cis::Api::Subscription::Model::CisSubscriptionRequest 

    # (no documentation provided)
    attr_accessor :merchantPaymentMethodId
    # the action to be executed
    attr_accessor :action
    # (no documentation provided)
    attr_accessor :newValue
    # the propagate flag
    attr_accessor :propagate

    # the json hash for this CisChangePaymentMethodRequest
    def to_jaxb_json_hash
      _h = super
      _h['merchantPaymentMethodId'] = merchantPaymentMethodId.to_jaxb_json_hash unless merchantPaymentMethodId.nil?
      _h['action'] = action.to_jaxb_json_hash unless action.nil?
      _h['newValue'] = newValue.to_jaxb_json_hash unless newValue.nil?
      _h['propagate'] = propagate.to_jaxb_json_hash unless propagate.nil?
      return _h
    end

    #initializes this CisChangePaymentMethodRequest with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['merchantPaymentMethodId'].nil?
          _oa = _o['merchantPaymentMethodId']
            if(_oa.is_a? Hash)
              @merchantPaymentMethodId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @merchantPaymentMethodId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @merchantPaymentMethodId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @merchantPaymentMethodId.push String.from_json(_item)
                 else
                   @merchantPaymentMethodId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @merchantPaymentMethodId = _oa
            end
          end
        if !_o['action'].nil?
          _oa = _o['action']
            if(_oa.is_a? Hash)
              @action = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @action =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @action = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @action.push String.from_json(_item)
                 else
                   @action.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @action = _oa
            end
          end
        if !_o['newValue'].nil?
          _oa = _o['newValue']
            if(_oa.is_a? Hash)
              @newValue = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @newValue =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @newValue = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @newValue.push String.from_json(_item)
                 else
                   @newValue.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @newValue = _oa
            end
          end
        if !_o['propagate'].nil?
          _oa = _o['propagate']
            if(_oa.is_a? Hash)
              @propagate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @propagate =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @propagate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @propagate.push Boolean.from_json(_item)
                 else
                   @propagate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @propagate = _oa
            end
          end
    end

    # constructs a CisChangePaymentMethodRequest from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Com

module Hybris

module Cis

module Api

module Subscription

module Model

  # (no documentation provided)
  class CisSubscriptionSessionInitRequest < Com::Hybris::Cis::Api::Subscription::Model::CisSubscriptionRequest 

    # return URL
    attr_accessor :returnUrl
    # cancel return URL
    attr_accessor :cancelReturnUrl
    # the merchantAccountId
    attr_accessor :merchantAccountId
    # the ipAddress
    attr_accessor :ipAddress

    # the json hash for this CisSubscriptionSessionInitRequest
    def to_jaxb_json_hash
      _h = super
      _h['returnUrl'] = returnUrl.to_jaxb_json_hash unless returnUrl.nil?
      _h['cancelReturnUrl'] = cancelReturnUrl.to_jaxb_json_hash unless cancelReturnUrl.nil?
      _h['merchantAccountId'] = merchantAccountId.to_jaxb_json_hash unless merchantAccountId.nil?
      _h['ipAddress'] = ipAddress.to_jaxb_json_hash unless ipAddress.nil?
      return _h
    end

    #initializes this CisSubscriptionSessionInitRequest with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['returnUrl'].nil?
          _oa = _o['returnUrl']
            if(_oa.is_a? Hash)
              @returnUrl = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @returnUrl =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @returnUrl = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @returnUrl.push String.from_json(_item)
                 else
                   @returnUrl.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @returnUrl = _oa
            end
          end
        if !_o['cancelReturnUrl'].nil?
          _oa = _o['cancelReturnUrl']
            if(_oa.is_a? Hash)
              @cancelReturnUrl = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cancelReturnUrl =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cancelReturnUrl = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cancelReturnUrl.push String.from_json(_item)
                 else
                   @cancelReturnUrl.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cancelReturnUrl = _oa
            end
          end
        if !_o['merchantAccountId'].nil?
          _oa = _o['merchantAccountId']
            if(_oa.is_a? Hash)
              @merchantAccountId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @merchantAccountId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @merchantAccountId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @merchantAccountId.push String.from_json(_item)
                 else
                   @merchantAccountId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @merchantAccountId = _oa
            end
          end
        if !_o['ipAddress'].nil?
          _oa = _o['ipAddress']
            if(_oa.is_a? Hash)
              @ipAddress = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @ipAddress =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @ipAddress = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @ipAddress.push String.from_json(_item)
                 else
                   @ipAddress.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @ipAddress = _oa
            end
          end
    end

    # constructs a CisSubscriptionSessionInitRequest from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Com

module Hybris

module Cis

module Api

module Subscription

module Model

  # (no documentation provided)
  class CisSubscriptionTransactionResult < Com::Hybris::Cis::Api::Model::CisResult 

    # (no documentation provided)
    attr_accessor :request
    # (no documentation provided)
    attr_accessor :amount
    # client authorization ID
    attr_accessor :clientAuthorizationId
    # the merchantProductId
    attr_accessor :merchantProductId
    # the sessionTransactionToken
    attr_accessor :sessionTransactionToken

    # the json hash for this CisSubscriptionTransactionResult
    def to_jaxb_json_hash
      _h = super
      _h['request'] = request.to_jaxb_json_hash unless request.nil?
      _h['amount'] = amount.to_jaxb_json_hash unless amount.nil?
      _h['clientAuthorizationId'] = clientAuthorizationId.to_jaxb_json_hash unless clientAuthorizationId.nil?
      _h['merchantProductId'] = merchantProductId.to_jaxb_json_hash unless merchantProductId.nil?
      _h['sessionTransactionToken'] = sessionTransactionToken.to_jaxb_json_hash unless sessionTransactionToken.nil?
      return _h
    end

    #initializes this CisSubscriptionTransactionResult with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['request'].nil?
          _oa = _o['request']
            if(_oa.is_a? Hash)
              @request = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @request =  Com::Hybris::Cis::Api::Subscription::Model::CisSubscriptionRequest.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @request = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @request.push Com::Hybris::Cis::Api::Subscription::Model::CisSubscriptionRequest.from_json(_item)
                 else
                   @request.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @request = _oa
            end
          end
        if !_o['amount'].nil?
          _oa = _o['amount']
            if(_oa.is_a? Hash)
              @amount = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @amount =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @amount = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @amount.push Float.from_json(_item)
                 else
                   @amount.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @amount = _oa
            end
          end
        if !_o['clientAuthorizationId'].nil?
          _oa = _o['clientAuthorizationId']
            if(_oa.is_a? Hash)
              @clientAuthorizationId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @clientAuthorizationId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @clientAuthorizationId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @clientAuthorizationId.push String.from_json(_item)
                 else
                   @clientAuthorizationId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @clientAuthorizationId = _oa
            end
          end
        if !_o['merchantProductId'].nil?
          _oa = _o['merchantProductId']
            if(_oa.is_a? Hash)
              @merchantProductId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @merchantProductId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @merchantProductId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @merchantProductId.push String.from_json(_item)
                 else
                   @merchantProductId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @merchantProductId = _oa
            end
          end
        if !_o['sessionTransactionToken'].nil?
          _oa = _o['sessionTransactionToken']
            if(_oa.is_a? Hash)
              @sessionTransactionToken = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @sessionTransactionToken =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @sessionTransactionToken = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @sessionTransactionToken.push String.from_json(_item)
                 else
                   @sessionTransactionToken.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @sessionTransactionToken = _oa
            end
          end
    end

    # constructs a CisSubscriptionTransactionResult from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Com

module Hybris

module Cis

module Api

module Subscription

module Model

  # (no documentation provided)
  class CisSubscriptionData < Com::Hybris::Cis::Api::Model::CisResult 

    # (no documentation provided)
    attr_accessor :currency
    # (no documentation provided)
    attr_accessor :comments
    # (no documentation provided)
    attr_accessor :merchantAccountId
    # (no documentation provided)
    attr_accessor :subscriptionId
    # (no documentation provided)
    attr_accessor :subscriptionOrderId
    # (no documentation provided)
    attr_accessor :subscriptionOrderEntryId
    # (no documentation provided)
    attr_accessor :subscriptionProductId
    # (no documentation provided)
    attr_accessor :subscriptionDescription
    # (no documentation provided)
    attr_accessor :subscriptionStartDate
    # (no documentation provided)
    attr_accessor :subscriptionEndDate
    # (no documentation provided)
    attr_accessor :subscriptionStatus
    # (no documentation provided)
    attr_accessor :cancellationPossible
    # (no documentation provided)
    attr_accessor :billingFrequency
    # (no documentation provided)
    attr_accessor :contractDuration
    # (no documentation provided)
    attr_accessor :orderDate
    # (no documentation provided)
    attr_accessor :cancelDate
    # (no documentation provided)
    attr_accessor :subscriptionName
    # (no documentation provided)
    attr_accessor :billingSystemId
    # (no documentation provided)
    attr_accessor :paymentMethod
    # (no documentation provided)
    attr_accessor :autoRenewal
    # (no documentation provided)
    attr_accessor :subscriptionStartDateInReadableFormat
    # (no documentation provided)
    attr_accessor :subscriptionEndDateInReadableFormat

    # the json hash for this CisSubscriptionData
    def to_jaxb_json_hash
      _h = super
      _h['currency'] = currency.to_jaxb_json_hash unless currency.nil?
      _h['comments'] = comments.to_jaxb_json_hash unless comments.nil?
      _h['merchantAccountId'] = merchantAccountId.to_jaxb_json_hash unless merchantAccountId.nil?
      _h['subscriptionId'] = subscriptionId.to_jaxb_json_hash unless subscriptionId.nil?
      _h['subscriptionOrderId'] = subscriptionOrderId.to_jaxb_json_hash unless subscriptionOrderId.nil?
      _h['subscriptionOrderEntryId'] = subscriptionOrderEntryId.to_jaxb_json_hash unless subscriptionOrderEntryId.nil?
      _h['subscriptionProductId'] = subscriptionProductId.to_jaxb_json_hash unless subscriptionProductId.nil?
      _h['subscriptionDescription'] = subscriptionDescription.to_jaxb_json_hash unless subscriptionDescription.nil?
      _h['subscriptionStartDate'] = subscriptionStartDate.to_jaxb_json_hash unless subscriptionStartDate.nil?
      _h['subscriptionEndDate'] = subscriptionEndDate.to_jaxb_json_hash unless subscriptionEndDate.nil?
      _h['subscriptionStatus'] = subscriptionStatus.to_jaxb_json_hash unless subscriptionStatus.nil?
      _h['cancellationPossible'] = cancellationPossible.to_jaxb_json_hash unless cancellationPossible.nil?
      _h['billingFrequency'] = billingFrequency.to_jaxb_json_hash unless billingFrequency.nil?
      _h['contractDuration'] = contractDuration.to_jaxb_json_hash unless contractDuration.nil?
      _h['orderDate'] = orderDate.to_jaxb_json_hash unless orderDate.nil?
      _h['cancelDate'] = cancelDate.to_jaxb_json_hash unless cancelDate.nil?
      _h['subscriptionName'] = subscriptionName.to_jaxb_json_hash unless subscriptionName.nil?
      _h['billingSystemId'] = billingSystemId.to_jaxb_json_hash unless billingSystemId.nil?
      _h['paymentMethod'] = paymentMethod.to_jaxb_json_hash unless paymentMethod.nil?
      _h['autoRenewal'] = autoRenewal.to_jaxb_json_hash unless autoRenewal.nil?
      _h['subscriptionStartDateInReadableFormat'] = subscriptionStartDateInReadableFormat.to_jaxb_json_hash unless subscriptionStartDateInReadableFormat.nil?
      _h['subscriptionEndDateInReadableFormat'] = subscriptionEndDateInReadableFormat.to_jaxb_json_hash unless subscriptionEndDateInReadableFormat.nil?
      return _h
    end

    #initializes this CisSubscriptionData with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['currency'].nil?
          _oa = _o['currency']
            if(_oa.is_a? Hash)
              @currency = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @currency =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @currency = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @currency.push String.from_json(_item)
                 else
                   @currency.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @currency = _oa
            end
          end
        if !_o['comments'].nil?
          _oa = _o['comments']
            if(_oa.is_a? Hash)
              @comments = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @comments =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @comments = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @comments.push String.from_json(_item)
                 else
                   @comments.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @comments = _oa
            end
          end
        if !_o['merchantAccountId'].nil?
          _oa = _o['merchantAccountId']
            if(_oa.is_a? Hash)
              @merchantAccountId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @merchantAccountId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @merchantAccountId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @merchantAccountId.push String.from_json(_item)
                 else
                   @merchantAccountId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @merchantAccountId = _oa
            end
          end
        if !_o['subscriptionId'].nil?
          _oa = _o['subscriptionId']
            if(_oa.is_a? Hash)
              @subscriptionId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @subscriptionId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @subscriptionId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @subscriptionId.push String.from_json(_item)
                 else
                   @subscriptionId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @subscriptionId = _oa
            end
          end
        if !_o['subscriptionOrderId'].nil?
          _oa = _o['subscriptionOrderId']
            if(_oa.is_a? Hash)
              @subscriptionOrderId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @subscriptionOrderId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @subscriptionOrderId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @subscriptionOrderId.push String.from_json(_item)
                 else
                   @subscriptionOrderId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @subscriptionOrderId = _oa
            end
          end
        if !_o['subscriptionOrderEntryId'].nil?
          _oa = _o['subscriptionOrderEntryId']
            if(_oa.is_a? Hash)
              @subscriptionOrderEntryId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @subscriptionOrderEntryId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @subscriptionOrderEntryId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @subscriptionOrderEntryId.push String.from_json(_item)
                 else
                   @subscriptionOrderEntryId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @subscriptionOrderEntryId = _oa
            end
          end
        if !_o['subscriptionProductId'].nil?
          _oa = _o['subscriptionProductId']
            if(_oa.is_a? Hash)
              @subscriptionProductId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @subscriptionProductId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @subscriptionProductId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @subscriptionProductId.push String.from_json(_item)
                 else
                   @subscriptionProductId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @subscriptionProductId = _oa
            end
          end
        if !_o['subscriptionDescription'].nil?
          _oa = _o['subscriptionDescription']
            if(_oa.is_a? Hash)
              @subscriptionDescription = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @subscriptionDescription =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @subscriptionDescription = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @subscriptionDescription.push String.from_json(_item)
                 else
                   @subscriptionDescription.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @subscriptionDescription = _oa
            end
          end
        if !_o['subscriptionStartDate'].nil?
          _oa = _o['subscriptionStartDate']
            if(_oa.is_a? Hash)
              @subscriptionStartDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @subscriptionStartDate =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @subscriptionStartDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @subscriptionStartDate.push Time.from_json(_item)
                 else
                   @subscriptionStartDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @subscriptionStartDate = _oa
            end
          end
        if !_o['subscriptionEndDate'].nil?
          _oa = _o['subscriptionEndDate']
            if(_oa.is_a? Hash)
              @subscriptionEndDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @subscriptionEndDate =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @subscriptionEndDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @subscriptionEndDate.push Time.from_json(_item)
                 else
                   @subscriptionEndDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @subscriptionEndDate = _oa
            end
          end
        if !_o['subscriptionStatus'].nil?
          _oa = _o['subscriptionStatus']
            if(_oa.is_a? Hash)
              @subscriptionStatus = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @subscriptionStatus =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @subscriptionStatus = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @subscriptionStatus.push String.from_json(_item)
                 else
                   @subscriptionStatus.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @subscriptionStatus = _oa
            end
          end
        if !_o['cancellationPossible'].nil?
          _oa = _o['cancellationPossible']
            if(_oa.is_a? Hash)
              @cancellationPossible = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cancellationPossible =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cancellationPossible = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cancellationPossible.push Boolean.from_json(_item)
                 else
                   @cancellationPossible.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cancellationPossible = _oa
            end
          end
        if !_o['billingFrequency'].nil?
          _oa = _o['billingFrequency']
            if(_oa.is_a? Hash)
              @billingFrequency = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @billingFrequency =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @billingFrequency = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @billingFrequency.push String.from_json(_item)
                 else
                   @billingFrequency.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @billingFrequency = _oa
            end
          end
        if !_o['contractDuration'].nil?
          _oa = _o['contractDuration']
            if(_oa.is_a? Hash)
              @contractDuration = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @contractDuration =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @contractDuration = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @contractDuration.push String.from_json(_item)
                 else
                   @contractDuration.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @contractDuration = _oa
            end
          end
        if !_o['orderDate'].nil?
          _oa = _o['orderDate']
            if(_oa.is_a? Hash)
              @orderDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @orderDate =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @orderDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @orderDate.push Time.from_json(_item)
                 else
                   @orderDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @orderDate = _oa
            end
          end
        if !_o['cancelDate'].nil?
          _oa = _o['cancelDate']
            if(_oa.is_a? Hash)
              @cancelDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cancelDate =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cancelDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cancelDate.push Time.from_json(_item)
                 else
                   @cancelDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cancelDate = _oa
            end
          end
        if !_o['subscriptionName'].nil?
          _oa = _o['subscriptionName']
            if(_oa.is_a? Hash)
              @subscriptionName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @subscriptionName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @subscriptionName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @subscriptionName.push String.from_json(_item)
                 else
                   @subscriptionName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @subscriptionName = _oa
            end
          end
        if !_o['billingSystemId'].nil?
          _oa = _o['billingSystemId']
            if(_oa.is_a? Hash)
              @billingSystemId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @billingSystemId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @billingSystemId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @billingSystemId.push String.from_json(_item)
                 else
                   @billingSystemId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @billingSystemId = _oa
            end
          end
        if !_o['paymentMethod'].nil?
          _oa = _o['paymentMethod']
            if(_oa.is_a? Hash)
              @paymentMethod = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @paymentMethod =  Com::Hybris::Cis::Api::Subscription::Model::CisPaymentMethod.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @paymentMethod = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @paymentMethod.push Com::Hybris::Cis::Api::Subscription::Model::CisPaymentMethod.from_json(_item)
                 else
                   @paymentMethod.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @paymentMethod = _oa
            end
          end
        if !_o['autoRenewal'].nil?
          _oa = _o['autoRenewal']
            if(_oa.is_a? Hash)
              @autoRenewal = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @autoRenewal =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @autoRenewal = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @autoRenewal.push Boolean.from_json(_item)
                 else
                   @autoRenewal.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @autoRenewal = _oa
            end
          end
        if !_o['subscriptionStartDateInReadableFormat'].nil?
          _oa = _o['subscriptionStartDateInReadableFormat']
            if(_oa.is_a? Hash)
              @subscriptionStartDateInReadableFormat = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @subscriptionStartDateInReadableFormat =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @subscriptionStartDateInReadableFormat = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @subscriptionStartDateInReadableFormat.push String.from_json(_item)
                 else
                   @subscriptionStartDateInReadableFormat.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @subscriptionStartDateInReadableFormat = _oa
            end
          end
        if !_o['subscriptionEndDateInReadableFormat'].nil?
          _oa = _o['subscriptionEndDateInReadableFormat']
            if(_oa.is_a? Hash)
              @subscriptionEndDateInReadableFormat = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @subscriptionEndDateInReadableFormat =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @subscriptionEndDateInReadableFormat = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @subscriptionEndDateInReadableFormat.push String.from_json(_item)
                 else
                   @subscriptionEndDateInReadableFormat.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @subscriptionEndDateInReadableFormat = _oa
            end
          end
    end

    # constructs a CisSubscriptionData from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Com

module Hybris

module Cis

module Api

module Subscription

module Model

  # (no documentation provided)
  class CisSubscriptionCancelSubscriptionRequest < Com::Hybris::Cis::Api::Subscription::Model::CisSubscriptionRequest 

    # (no documentation provided)
    attr_accessor :merchantSubscriptionId
    # the cancellation mode
    attr_accessor :cancelationMode
    # the force flag
    attr_accessor :force

    # the json hash for this CisSubscriptionCancelSubscriptionRequest
    def to_jaxb_json_hash
      _h = super
      _h['merchantSubscriptionId'] = merchantSubscriptionId.to_jaxb_json_hash unless merchantSubscriptionId.nil?
      _h['cancelationMode'] = cancelationMode.to_jaxb_json_hash unless cancelationMode.nil?
      _h['force'] = force.to_jaxb_json_hash unless force.nil?
      return _h
    end

    #initializes this CisSubscriptionCancelSubscriptionRequest with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['merchantSubscriptionId'].nil?
          _oa = _o['merchantSubscriptionId']
            if(_oa.is_a? Hash)
              @merchantSubscriptionId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @merchantSubscriptionId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @merchantSubscriptionId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @merchantSubscriptionId.push String.from_json(_item)
                 else
                   @merchantSubscriptionId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @merchantSubscriptionId = _oa
            end
          end
        if !_o['cancelationMode'].nil?
          _oa = _o['cancelationMode']
            if(_oa.is_a? Hash)
              @cancelationMode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @cancelationMode =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @cancelationMode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @cancelationMode.push String.from_json(_item)
                 else
                   @cancelationMode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @cancelationMode = _oa
            end
          end
        if !_o['force'].nil?
          _oa = _o['force']
            if(_oa.is_a? Hash)
              @force = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @force =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @force = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @force.push Boolean.from_json(_item)
                 else
                   @force.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @force = _oa
            end
          end
    end

    # constructs a CisSubscriptionCancelSubscriptionRequest from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Com

module Hybris

module Cis

module Api

module Subscription

module Model

  # (no documentation provided)
  class CisFileStreamResult < Com::Hybris::Cis::Api::Model::CisResult 

    # (no documentation provided)
    attr_accessor :mimeType
    # (no documentation provided)
    attr_accessor :bytes
    # (no documentation provided)
    attr_accessor :fileName

    # the json hash for this CisFileStreamResult
    def to_jaxb_json_hash
      _h = super
      _h['mimeType'] = mimeType.to_jaxb_json_hash unless mimeType.nil?
      if !bytes.nil?
        _ha = Array.new
        bytes.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['bytes'] = _ha
      end
      _h['fileName'] = fileName.to_jaxb_json_hash unless fileName.nil?
      return _h
    end

    #initializes this CisFileStreamResult with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['mimeType'].nil?
          _oa = _o['mimeType']
            if(_oa.is_a? Hash)
              @mimeType = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @mimeType =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @mimeType = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @mimeType.push String.from_json(_item)
                 else
                   @mimeType.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @mimeType = _oa
            end
          end
        if !_o['bytes'].nil?
          _oa = _o['bytes']
            if(_oa.is_a? Hash)
              @bytes = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @bytes =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @bytes = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @bytes.push Fixnum.from_json(_item)
                 else
                   @bytes.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @bytes = _oa
            end
          end
        if !_o['fileName'].nil?
          _oa = _o['fileName']
            if(_oa.is_a? Hash)
              @fileName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @fileName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @fileName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @fileName.push String.from_json(_item)
                 else
                   @fileName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @fileName = _oa
            end
          end
    end

    # constructs a CisFileStreamResult from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Com

module Hybris

module Cis

module Api

module Subscription

module Model

  # (no documentation provided)
  class CisSubscriptionReplacePaymentMethodRequest < Com::Hybris::Cis::Api::Subscription::Model::CisSubscriptionRequest 

    # the merchantSubscriptionId
    attr_accessor :merchantSubscriptionId
    # the merchantPaymentMethodId
    attr_accessor :merchantPaymentMethodId

    # the json hash for this CisSubscriptionReplacePaymentMethodRequest
    def to_jaxb_json_hash
      _h = super
      _h['merchantSubscriptionId'] = merchantSubscriptionId.to_jaxb_json_hash unless merchantSubscriptionId.nil?
      _h['merchantPaymentMethodId'] = merchantPaymentMethodId.to_jaxb_json_hash unless merchantPaymentMethodId.nil?
      return _h
    end

    #initializes this CisSubscriptionReplacePaymentMethodRequest with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['merchantSubscriptionId'].nil?
          _oa = _o['merchantSubscriptionId']
            if(_oa.is_a? Hash)
              @merchantSubscriptionId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @merchantSubscriptionId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @merchantSubscriptionId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @merchantSubscriptionId.push String.from_json(_item)
                 else
                   @merchantSubscriptionId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @merchantSubscriptionId = _oa
            end
          end
        if !_o['merchantPaymentMethodId'].nil?
          _oa = _o['merchantPaymentMethodId']
            if(_oa.is_a? Hash)
              @merchantPaymentMethodId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @merchantPaymentMethodId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @merchantPaymentMethodId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @merchantPaymentMethodId.push String.from_json(_item)
                 else
                   @merchantPaymentMethodId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @merchantPaymentMethodId = _oa
            end
          end
    end

    # constructs a CisSubscriptionReplacePaymentMethodRequest from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Com

module Hybris

module Cis

module Api

module Subscription

module Model

  # (no documentation provided)
  class CisPaymentMethodResult < Com::Hybris::Cis::Api::Model::CisResult 

    # the payment method
    attr_accessor :paymentMethod

    # the json hash for this CisPaymentMethodResult
    def to_jaxb_json_hash
      _h = super
      _h['paymentMethod'] = paymentMethod.to_jaxb_json_hash unless paymentMethod.nil?
      return _h
    end

    #initializes this CisPaymentMethodResult with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['paymentMethod'].nil?
          _oa = _o['paymentMethod']
            if(_oa.is_a? Hash)
              @paymentMethod = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @paymentMethod =  Com::Hybris::Cis::Api::Subscription::Model::CisPaymentMethod.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @paymentMethod = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @paymentMethod.push Com::Hybris::Cis::Api::Subscription::Model::CisPaymentMethod.from_json(_item)
                 else
                   @paymentMethod.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @paymentMethod = _oa
            end
          end
    end

    # constructs a CisPaymentMethodResult from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Com

module Hybris

module Cis

module Api

module Subscription

module Model

  # (no documentation provided)
  class CisSubscriptionSessionFinalizeRequest < Com::Hybris::Cis::Api::Subscription::Model::CisSubscriptionRequest 

    # (no documentation provided)
    attr_accessor :authorizationRequestId
    # (no documentation provided)
    attr_accessor :authorizationRequestToken

    # the json hash for this CisSubscriptionSessionFinalizeRequest
    def to_jaxb_json_hash
      _h = super
      _h['authorizationRequestId'] = authorizationRequestId.to_jaxb_json_hash unless authorizationRequestId.nil?
      _h['authorizationRequestToken'] = authorizationRequestToken.to_jaxb_json_hash unless authorizationRequestToken.nil?
      return _h
    end

    #initializes this CisSubscriptionSessionFinalizeRequest with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['authorizationRequestId'].nil?
          _oa = _o['authorizationRequestId']
            if(_oa.is_a? Hash)
              @authorizationRequestId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @authorizationRequestId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @authorizationRequestId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @authorizationRequestId.push String.from_json(_item)
                 else
                   @authorizationRequestId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @authorizationRequestId = _oa
            end
          end
        if !_o['authorizationRequestToken'].nil?
          _oa = _o['authorizationRequestToken']
            if(_oa.is_a? Hash)
              @authorizationRequestToken = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @authorizationRequestToken =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @authorizationRequestToken = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @authorizationRequestToken.push String.from_json(_item)
                 else
                   @authorizationRequestToken.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @authorizationRequestToken = _oa
            end
          end
    end

    # constructs a CisSubscriptionSessionFinalizeRequest from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Com

module Hybris

module Cis

module Api

module Model

  # (no documentation provided)
  class CisDecision

    # (no documentation provided)
    ACCEPT = "ACCEPT"

    # (no documentation provided)
    REVIEW = "REVIEW"

    # (no documentation provided)
    REJECT = "REJECT"

    # (no documentation provided)
    ERROR = "ERROR"
  end

end

end

end

end

end

module Com

module Hybris

module Cis

module Api

module Subscription

module Model

  # (no documentation provided)
  class CisSubscriptionCreateRequest < Com::Hybris::Cis::Api::Subscription::Model::CisSubscriptionRequest 

    # the orderId
    attr_accessor :orderId
    # the merchantAccountId
    attr_accessor :merchantAccountId
    # the subscriptionItem
    attr_accessor :subscriptionItem
    # (no documentation provided)
    attr_accessor :currency
    # the date
    attr_accessor :orderDate
    # the merchantPaymentMethodId
    attr_accessor :merchantPaymentMethodId

    # the json hash for this CisSubscriptionCreateRequest
    def to_jaxb_json_hash
      _h = super
      _h['orderId'] = orderId.to_jaxb_json_hash unless orderId.nil?
      _h['merchantAccountId'] = merchantAccountId.to_jaxb_json_hash unless merchantAccountId.nil?
      _h['subscriptionItem'] = subscriptionItem.to_jaxb_json_hash unless subscriptionItem.nil?
      _h['currency'] = currency.to_jaxb_json_hash unless currency.nil?
      _h['orderDate'] = orderDate.to_jaxb_json_hash unless orderDate.nil?
      _h['merchantPaymentMethodId'] = merchantPaymentMethodId.to_jaxb_json_hash unless merchantPaymentMethodId.nil?
      return _h
    end

    #initializes this CisSubscriptionCreateRequest with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['orderId'].nil?
          _oa = _o['orderId']
            if(_oa.is_a? Hash)
              @orderId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @orderId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @orderId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @orderId.push String.from_json(_item)
                 else
                   @orderId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @orderId = _oa
            end
          end
        if !_o['merchantAccountId'].nil?
          _oa = _o['merchantAccountId']
            if(_oa.is_a? Hash)
              @merchantAccountId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @merchantAccountId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @merchantAccountId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @merchantAccountId.push String.from_json(_item)
                 else
                   @merchantAccountId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @merchantAccountId = _oa
            end
          end
        if !_o['subscriptionItem'].nil?
          _oa = _o['subscriptionItem']
            if(_oa.is_a? Hash)
              @subscriptionItem = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @subscriptionItem =  Com::Hybris::Cis::Api::Subscription::Model::CisSubscriptionItem.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @subscriptionItem = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @subscriptionItem.push Com::Hybris::Cis::Api::Subscription::Model::CisSubscriptionItem.from_json(_item)
                 else
                   @subscriptionItem.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @subscriptionItem = _oa
            end
          end
        if !_o['currency'].nil?
          _oa = _o['currency']
            if(_oa.is_a? Hash)
              @currency = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @currency =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @currency = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @currency.push String.from_json(_item)
                 else
                   @currency.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @currency = _oa
            end
          end
        if !_o['orderDate'].nil?
          _oa = _o['orderDate']
            if(_oa.is_a? Hash)
              @orderDate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @orderDate =  Time.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @orderDate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @orderDate.push Time.from_json(_item)
                 else
                   @orderDate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @orderDate = _oa
            end
          end
        if !_o['merchantPaymentMethodId'].nil?
          _oa = _o['merchantPaymentMethodId']
            if(_oa.is_a? Hash)
              @merchantPaymentMethodId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @merchantPaymentMethodId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @merchantPaymentMethodId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @merchantPaymentMethodId.push String.from_json(_item)
                 else
                   @merchantPaymentMethodId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @merchantPaymentMethodId = _oa
            end
          end
    end

    # constructs a CisSubscriptionCreateRequest from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Com

module Hybris

module Cis

module Api

module Subscription

module Model

  # (no documentation provided)
  class CisSubscriptionProfileRequest < Com::Hybris::Cis::Api::Subscription::Model::CisSubscriptionRequest 

    # (no documentation provided)
    attr_accessor :customerName
    # (no documentation provided)
    attr_accessor :company
    # (no documentation provided)
    attr_accessor :emailPreference
    # (no documentation provided)
    attr_accessor :languagePreference
    # (no documentation provided)
    attr_accessor :profileId
    # (no documentation provided)
    attr_accessor :shippingAddress
    # the emailAddress
    attr_accessor :emailAddress
    # (no documentation provided)
    attr_accessor :currency

    # the json hash for this CisSubscriptionProfileRequest
    def to_jaxb_json_hash
      _h = super
      _h['customerName'] = customerName.to_jaxb_json_hash unless customerName.nil?
      _h['company'] = company.to_jaxb_json_hash unless company.nil?
      _h['emailPreference'] = emailPreference.to_jaxb_json_hash unless emailPreference.nil?
      _h['languagePreference'] = languagePreference.to_jaxb_json_hash unless languagePreference.nil?
      _h['profileId'] = profileId.to_jaxb_json_hash unless profileId.nil?
      _h['shippingAddress'] = shippingAddress.to_jaxb_json_hash unless shippingAddress.nil?
      _h['emailAddress'] = emailAddress.to_jaxb_json_hash unless emailAddress.nil?
      _h['currency'] = currency.to_jaxb_json_hash unless currency.nil?
      return _h
    end

    #initializes this CisSubscriptionProfileRequest with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['customerName'].nil?
          _oa = _o['customerName']
            if(_oa.is_a? Hash)
              @customerName = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @customerName =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @customerName = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @customerName.push String.from_json(_item)
                 else
                   @customerName.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @customerName = _oa
            end
          end
        if !_o['company'].nil?
          _oa = _o['company']
            if(_oa.is_a? Hash)
              @company = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @company =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @company = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @company.push String.from_json(_item)
                 else
                   @company.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @company = _oa
            end
          end
        if !_o['emailPreference'].nil?
          _oa = _o['emailPreference']
            if(_oa.is_a? Hash)
              @emailPreference = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @emailPreference =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @emailPreference = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @emailPreference.push String.from_json(_item)
                 else
                   @emailPreference.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @emailPreference = _oa
            end
          end
        if !_o['languagePreference'].nil?
          _oa = _o['languagePreference']
            if(_oa.is_a? Hash)
              @languagePreference = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @languagePreference =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @languagePreference = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @languagePreference.push String.from_json(_item)
                 else
                   @languagePreference.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @languagePreference = _oa
            end
          end
        if !_o['profileId'].nil?
          _oa = _o['profileId']
            if(_oa.is_a? Hash)
              @profileId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @profileId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @profileId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @profileId.push String.from_json(_item)
                 else
                   @profileId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @profileId = _oa
            end
          end
        if !_o['shippingAddress'].nil?
          _oa = _o['shippingAddress']
            if(_oa.is_a? Hash)
              @shippingAddress = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @shippingAddress =  Com::Hybris::Cis::Api::Model::CisAddress.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @shippingAddress = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @shippingAddress.push Com::Hybris::Cis::Api::Model::CisAddress.from_json(_item)
                 else
                   @shippingAddress.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @shippingAddress = _oa
            end
          end
        if !_o['emailAddress'].nil?
          _oa = _o['emailAddress']
            if(_oa.is_a? Hash)
              @emailAddress = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @emailAddress =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @emailAddress = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @emailAddress.push String.from_json(_item)
                 else
                   @emailAddress.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @emailAddress = _oa
            end
          end
        if !_o['currency'].nil?
          _oa = _o['currency']
            if(_oa.is_a? Hash)
              @currency = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @currency =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @currency = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @currency.push String.from_json(_item)
                 else
                   @currency.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @currency = _oa
            end
          end
    end

    # constructs a CisSubscriptionProfileRequest from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Com

module Hybris

module Cis

module Api

module Subscription

module Model

  # (no documentation provided)
  class AbstractCisSubscriptionUpdateRequest < Com::Hybris::Cis::Api::Subscription::Model::CisSubscriptionRequest 

    # (no documentation provided)
    attr_accessor :merchantSubscriptionId
    # (no documentation provided)
    attr_accessor :effectiveFrom

    # the json hash for this AbstractCisSubscriptionUpdateRequest
    def to_jaxb_json_hash
      _h = super
      _h['merchantSubscriptionId'] = merchantSubscriptionId.to_jaxb_json_hash unless merchantSubscriptionId.nil?
      _h['effectiveFrom'] = effectiveFrom.to_jaxb_json_hash unless effectiveFrom.nil?
      return _h
    end

    #initializes this AbstractCisSubscriptionUpdateRequest with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['merchantSubscriptionId'].nil?
          _oa = _o['merchantSubscriptionId']
            if(_oa.is_a? Hash)
              @merchantSubscriptionId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @merchantSubscriptionId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @merchantSubscriptionId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @merchantSubscriptionId.push String.from_json(_item)
                 else
                   @merchantSubscriptionId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @merchantSubscriptionId = _oa
            end
          end
        if !_o['effectiveFrom'].nil?
          _oa = _o['effectiveFrom']
            if(_oa.is_a? Hash)
              @effectiveFrom = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @effectiveFrom =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @effectiveFrom = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @effectiveFrom.push String.from_json(_item)
                 else
                   @effectiveFrom.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @effectiveFrom = _oa
            end
          end
    end

    # constructs a AbstractCisSubscriptionUpdateRequest from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Com

module Hybris

module Cis

module Api

module Subscription

module Model

  # (no documentation provided)
  class CisSubscriptionPayNowRequest < Com::Hybris::Cis::Api::Subscription::Model::CisSubscriptionRequest 

    # (no documentation provided)
    attr_accessor :amount
    # (no documentation provided)
    attr_accessor :currency
    # vendor specific parameters
    attr_accessor :parameters
    # (no documentation provided)
    attr_accessor :profileId
    # (no documentation provided)
    attr_accessor :paymentMethodId
    # (no documentation provided)
    attr_accessor :merchantTransactionId
    # (no documentation provided)
    attr_accessor :merchantTransactionDescription
    # the transaction mode
    attr_accessor :transactionMode
    # (no documentation provided)
    attr_accessor :lineItems

    # the json hash for this CisSubscriptionPayNowRequest
    def to_jaxb_json_hash
      _h = super
      _h['amount'] = amount.to_jaxb_json_hash unless amount.nil?
      _h['currency'] = currency.to_jaxb_json_hash unless currency.nil?
      _h['parameters'] = parameters.to_jaxb_json_hash unless parameters.nil?
      _h['profileId'] = profileId.to_jaxb_json_hash unless profileId.nil?
      _h['paymentMethodId'] = paymentMethodId.to_jaxb_json_hash unless paymentMethodId.nil?
      _h['merchantTransactionId'] = merchantTransactionId.to_jaxb_json_hash unless merchantTransactionId.nil?
      _h['merchantTransactionDescription'] = merchantTransactionDescription.to_jaxb_json_hash unless merchantTransactionDescription.nil?
      _h['transactionMode'] = transactionMode.to_jaxb_json_hash unless transactionMode.nil?
      if !lineItems.nil?
        _ha = Array.new
        lineItems.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['lineItems'] = _ha
      end
      return _h
    end

    #initializes this CisSubscriptionPayNowRequest with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['amount'].nil?
          _oa = _o['amount']
            if(_oa.is_a? Hash)
              @amount = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @amount =  Float.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @amount = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @amount.push Float.from_json(_item)
                 else
                   @amount.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @amount = _oa
            end
          end
        if !_o['currency'].nil?
          _oa = _o['currency']
            if(_oa.is_a? Hash)
              @currency = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @currency =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @currency = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @currency.push String.from_json(_item)
                 else
                   @currency.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @currency = _oa
            end
          end
        if !_o['parameters'].nil?
          _oa = _o['parameters']
            if(_oa.is_a? Hash)
              @parameters = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @parameters =  Com::Hybris::Cis::Api::Model::AnnotationHashMap.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @parameters = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @parameters.push Com::Hybris::Cis::Api::Model::AnnotationHashMap.from_json(_item)
                 else
                   @parameters.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @parameters = _oa
            end
          end
        if !_o['profileId'].nil?
          _oa = _o['profileId']
            if(_oa.is_a? Hash)
              @profileId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @profileId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @profileId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @profileId.push String.from_json(_item)
                 else
                   @profileId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @profileId = _oa
            end
          end
        if !_o['paymentMethodId'].nil?
          _oa = _o['paymentMethodId']
            if(_oa.is_a? Hash)
              @paymentMethodId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @paymentMethodId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @paymentMethodId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @paymentMethodId.push String.from_json(_item)
                 else
                   @paymentMethodId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @paymentMethodId = _oa
            end
          end
        if !_o['merchantTransactionId'].nil?
          _oa = _o['merchantTransactionId']
            if(_oa.is_a? Hash)
              @merchantTransactionId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @merchantTransactionId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @merchantTransactionId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @merchantTransactionId.push String.from_json(_item)
                 else
                   @merchantTransactionId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @merchantTransactionId = _oa
            end
          end
        if !_o['merchantTransactionDescription'].nil?
          _oa = _o['merchantTransactionDescription']
            if(_oa.is_a? Hash)
              @merchantTransactionDescription = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @merchantTransactionDescription =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @merchantTransactionDescription = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @merchantTransactionDescription.push String.from_json(_item)
                 else
                   @merchantTransactionDescription.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @merchantTransactionDescription = _oa
            end
          end
        if !_o['transactionMode'].nil?
          _oa = _o['transactionMode']
            if(_oa.is_a? Hash)
              @transactionMode = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @transactionMode =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @transactionMode = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @transactionMode.push String.from_json(_item)
                 else
                   @transactionMode.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @transactionMode = _oa
            end
          end
        if !_o['lineItems'].nil?
          _oa = _o['lineItems']
            if(_oa.is_a? Hash)
              @lineItems = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @lineItems =  Com::Hybris::Cis::Api::Model::CisLineItem.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @lineItems = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @lineItems.push Com::Hybris::Cis::Api::Model::CisLineItem.from_json(_item)
                 else
                   @lineItems.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @lineItems = _oa
            end
          end
    end

    # constructs a CisSubscriptionPayNowRequest from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Com

module Hybris

module Cis

module Api

module Subscription

module Model

  # (no documentation provided)
  class CisCustomerUsageResult < Com::Hybris::Cis::Api::Model::CisResult 


    # the json hash for this CisCustomerUsageResult
    def to_jaxb_json_hash
      _h = super
      return _h
    end

    #initializes this CisCustomerUsageResult with a json hash
    def init_jaxb_json_hash(_o)
      super _o
    end

    # constructs a CisCustomerUsageResult from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Com

module Hybris

module Cis

module Api

module Subscription

module Model

  # (no documentation provided)
  class CisSubscriptionOrderPostRequest < Com::Hybris::Cis::Api::Subscription::Model::CisSubscriptionRequest 

    # vendor specific parameters
    attr_accessor :parameters
    # the merchantAccountId
    attr_accessor :merchantAccountId
    # the subscriptionOrder
    attr_accessor :subscriptionOrder
    # the merchantPaymentMethodId
    attr_accessor :merchantPaymentMethodId
    # (no documentation provided)
    attr_accessor :currency

    # the json hash for this CisSubscriptionOrderPostRequest
    def to_jaxb_json_hash
      _h = super
      _h['parameters'] = parameters.to_jaxb_json_hash unless parameters.nil?
      _h['merchantAccountId'] = merchantAccountId.to_jaxb_json_hash unless merchantAccountId.nil?
      _h['subscriptionOrder'] = subscriptionOrder.to_jaxb_json_hash unless subscriptionOrder.nil?
      _h['merchantPaymentMethodId'] = merchantPaymentMethodId.to_jaxb_json_hash unless merchantPaymentMethodId.nil?
      _h['currency'] = currency.to_jaxb_json_hash unless currency.nil?
      return _h
    end

    #initializes this CisSubscriptionOrderPostRequest with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['parameters'].nil?
          _oa = _o['parameters']
            if(_oa.is_a? Hash)
              @parameters = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @parameters =  Com::Hybris::Cis::Api::Model::AnnotationHashMap.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @parameters = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @parameters.push Com::Hybris::Cis::Api::Model::AnnotationHashMap.from_json(_item)
                 else
                   @parameters.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @parameters = _oa
            end
          end
        if !_o['merchantAccountId'].nil?
          _oa = _o['merchantAccountId']
            if(_oa.is_a? Hash)
              @merchantAccountId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @merchantAccountId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @merchantAccountId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @merchantAccountId.push String.from_json(_item)
                 else
                   @merchantAccountId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @merchantAccountId = _oa
            end
          end
        if !_o['subscriptionOrder'].nil?
          _oa = _o['subscriptionOrder']
            if(_oa.is_a? Hash)
              @subscriptionOrder = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @subscriptionOrder =  Com::Hybris::Cis::Api::Subscription::Model::CisSubscriptionOrder.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @subscriptionOrder = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @subscriptionOrder.push Com::Hybris::Cis::Api::Subscription::Model::CisSubscriptionOrder.from_json(_item)
                 else
                   @subscriptionOrder.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @subscriptionOrder = _oa
            end
          end
        if !_o['merchantPaymentMethodId'].nil?
          _oa = _o['merchantPaymentMethodId']
            if(_oa.is_a? Hash)
              @merchantPaymentMethodId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @merchantPaymentMethodId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @merchantPaymentMethodId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @merchantPaymentMethodId.push String.from_json(_item)
                 else
                   @merchantPaymentMethodId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @merchantPaymentMethodId = _oa
            end
          end
        if !_o['currency'].nil?
          _oa = _o['currency']
            if(_oa.is_a? Hash)
              @currency = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @currency =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @currency = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @currency.push String.from_json(_item)
                 else
                   @currency.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @currency = _oa
            end
          end
    end

    # constructs a CisSubscriptionOrderPostRequest from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Com

module Hybris

module Cis

module Api

module Subscription

module Model

  # (no documentation provided)
  class CisPaymentMethodUpdateRequest < Com::Hybris::Cis::Api::Subscription::Model::CisSubscriptionRequest 

    # the merchant payment method id
    attr_accessor :merchantPaymentMethodId
    # Boolean#TRUE, Boolean#FALSE or &lt;code&gt;null&lt;/code&gt;
    attr_accessor :enabled
    # the billing address
    attr_accessor :billingAddress
    # the propagate value
    attr_accessor :propagate

    # the json hash for this CisPaymentMethodUpdateRequest
    def to_jaxb_json_hash
      _h = super
      _h['merchantPaymentMethodId'] = merchantPaymentMethodId.to_jaxb_json_hash unless merchantPaymentMethodId.nil?
      _h['enabled'] = enabled.to_jaxb_json_hash unless enabled.nil?
      _h['billingAddress'] = billingAddress.to_jaxb_json_hash unless billingAddress.nil?
      _h['propagate'] = propagate.to_jaxb_json_hash unless propagate.nil?
      return _h
    end

    #initializes this CisPaymentMethodUpdateRequest with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['merchantPaymentMethodId'].nil?
          _oa = _o['merchantPaymentMethodId']
            if(_oa.is_a? Hash)
              @merchantPaymentMethodId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @merchantPaymentMethodId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @merchantPaymentMethodId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @merchantPaymentMethodId.push String.from_json(_item)
                 else
                   @merchantPaymentMethodId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @merchantPaymentMethodId = _oa
            end
          end
        if !_o['enabled'].nil?
          _oa = _o['enabled']
            if(_oa.is_a? Hash)
              @enabled = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @enabled =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @enabled = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @enabled.push Boolean.from_json(_item)
                 else
                   @enabled.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @enabled = _oa
            end
          end
        if !_o['billingAddress'].nil?
          _oa = _o['billingAddress']
            if(_oa.is_a? Hash)
              @billingAddress = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @billingAddress =  Com::Hybris::Cis::Api::Model::CisAddress.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @billingAddress = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @billingAddress.push Com::Hybris::Cis::Api::Model::CisAddress.from_json(_item)
                 else
                   @billingAddress.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @billingAddress = _oa
            end
          end
        if !_o['propagate'].nil?
          _oa = _o['propagate']
            if(_oa.is_a? Hash)
              @propagate = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @propagate =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @propagate = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @propagate.push Boolean.from_json(_item)
                 else
                   @propagate.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @propagate = _oa
            end
          end
    end

    # constructs a CisPaymentMethodUpdateRequest from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Com

module Hybris

module Cis

module Api

module Model

  # (no documentation provided)
  class CisAddressType

    # (no documentation provided)
    SHIP_TO = "SHIP_TO"

    # (no documentation provided)
    SHIP_FROM = "SHIP_FROM"

    # (no documentation provided)
    BILL_TO = "BILL_TO"

    # (no documentation provided)
    ADMIN_ORIGIN = "ADMIN_ORIGIN"
  end

end

end

end

end

end

module Com

module Hybris

module Cis

module Api

module Subscription

module Model

  # (no documentation provided)
  class CisSubscriptionUpgradeResult < Com::Hybris::Cis::Api::Subscription::Model::CisSubscriptionData 

    # (no documentation provided)
    attr_accessor :futureBillings

    # the json hash for this CisSubscriptionUpgradeResult
    def to_jaxb_json_hash
      _h = super
      if !futureBillings.nil?
        _ha = Array.new
        futureBillings.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['futureBillings'] = _ha
      end
      return _h
    end

    #initializes this CisSubscriptionUpgradeResult with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['futureBillings'].nil?
          _oa = _o['futureBillings']
            if(_oa.is_a? Hash)
              @futureBillings = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @futureBillings =  Com::Hybris::Cis::Api::Subscription::Model::CisSubscriptionBillingInfo.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @futureBillings = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @futureBillings.push Com::Hybris::Cis::Api::Subscription::Model::CisSubscriptionBillingInfo.from_json(_item)
                 else
                   @futureBillings.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @futureBillings = _oa
            end
          end
    end

    # constructs a CisSubscriptionUpgradeResult from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Com

module Hybris

module Cis

module Api

module Subscription

module Model

  # (no documentation provided)
  class CisSubscriptionUpdateRequest < Com::Hybris::Cis::Api::Subscription::Model::AbstractCisSubscriptionUpdateRequest 

    # the contractDurationExtension
    attr_accessor :contractDurationExtension
    # the autoRenewal
    attr_accessor :autoRenewal
    # the merchantPaymentMethodId
    attr_accessor :merchantPaymentMethodId

    # the json hash for this CisSubscriptionUpdateRequest
    def to_jaxb_json_hash
      _h = super
      _h['contractDurationExtension'] = contractDurationExtension.to_jaxb_json_hash unless contractDurationExtension.nil?
      _h['autoRenewal'] = autoRenewal.to_jaxb_json_hash unless autoRenewal.nil?
      _h['merchantPaymentMethodId'] = merchantPaymentMethodId.to_jaxb_json_hash unless merchantPaymentMethodId.nil?
      return _h
    end

    #initializes this CisSubscriptionUpdateRequest with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['contractDurationExtension'].nil?
          _oa = _o['contractDurationExtension']
            if(_oa.is_a? Hash)
              @contractDurationExtension = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @contractDurationExtension =  Fixnum.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @contractDurationExtension = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @contractDurationExtension.push Fixnum.from_json(_item)
                 else
                   @contractDurationExtension.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @contractDurationExtension = _oa
            end
          end
        if !_o['autoRenewal'].nil?
          _oa = _o['autoRenewal']
            if(_oa.is_a? Hash)
              @autoRenewal = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @autoRenewal =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @autoRenewal = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @autoRenewal.push Boolean.from_json(_item)
                 else
                   @autoRenewal.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @autoRenewal = _oa
            end
          end
        if !_o['merchantPaymentMethodId'].nil?
          _oa = _o['merchantPaymentMethodId']
            if(_oa.is_a? Hash)
              @merchantPaymentMethodId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @merchantPaymentMethodId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @merchantPaymentMethodId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @merchantPaymentMethodId.push String.from_json(_item)
                 else
                   @merchantPaymentMethodId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @merchantPaymentMethodId = _oa
            end
          end
    end

    # constructs a CisSubscriptionUpdateRequest from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Com

module Hybris

module Cis

module Api

module Subscription

module Model

  # (no documentation provided)
  class CisSubscriptionUpgradeRequest < Com::Hybris::Cis::Api::Subscription::Model::CisSubscriptionCreateRequest 

    # the effectiveFrom
    attr_accessor :effectiveFrom
    # the merchantSourceSubscriptionId
    attr_accessor :merchantSourceSubscriptionId
    # the settlement
    attr_accessor :settlement
    # the preview
    attr_accessor :preview

    # the json hash for this CisSubscriptionUpgradeRequest
    def to_jaxb_json_hash
      _h = super
      _h['effectiveFrom'] = effectiveFrom.to_jaxb_json_hash unless effectiveFrom.nil?
      _h['merchantSourceSubscriptionId'] = merchantSourceSubscriptionId.to_jaxb_json_hash unless merchantSourceSubscriptionId.nil?
      _h['settlement'] = settlement.to_jaxb_json_hash unless settlement.nil?
      _h['preview'] = preview.to_jaxb_json_hash unless preview.nil?
      return _h
    end

    #initializes this CisSubscriptionUpgradeRequest with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['effectiveFrom'].nil?
          _oa = _o['effectiveFrom']
            if(_oa.is_a? Hash)
              @effectiveFrom = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @effectiveFrom =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @effectiveFrom = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @effectiveFrom.push String.from_json(_item)
                 else
                   @effectiveFrom.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @effectiveFrom = _oa
            end
          end
        if !_o['merchantSourceSubscriptionId'].nil?
          _oa = _o['merchantSourceSubscriptionId']
            if(_oa.is_a? Hash)
              @merchantSourceSubscriptionId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @merchantSourceSubscriptionId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @merchantSourceSubscriptionId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @merchantSourceSubscriptionId.push String.from_json(_item)
                 else
                   @merchantSourceSubscriptionId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @merchantSourceSubscriptionId = _oa
            end
          end
        if !_o['settlement'].nil?
          _oa = _o['settlement']
            if(_oa.is_a? Hash)
              @settlement = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @settlement =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @settlement = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @settlement.push String.from_json(_item)
                 else
                   @settlement.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @settlement = _oa
            end
          end
        if !_o['preview'].nil?
          _oa = _o['preview']
            if(_oa.is_a? Hash)
              @preview = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @preview =  Boolean.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @preview = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @preview.push Boolean.from_json(_item)
                 else
                   @preview.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @preview = _oa
            end
          end
    end

    # constructs a CisSubscriptionUpgradeRequest from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Com

module Hybris

module Cis

module Api

module Subscription

module Model

  # (no documentation provided)
  class CisSubscriptionProfileResult < Com::Hybris::Cis::Api::Subscription::Model::CisSubscriptionTransactionResult 

    # (no documentation provided)
    attr_accessor :profileId
    # the validation result
    attr_accessor :validationResult
    # (no documentation provided)
    attr_accessor :currency
    # (no documentation provided)
    attr_accessor :paymentMethods
    # (no documentation provided)
    attr_accessor :customerAddress
    # creation comments
    attr_accessor :comments
    # (no documentation provided)
    attr_accessor :subscriptions

    # the json hash for this CisSubscriptionProfileResult
    def to_jaxb_json_hash
      _h = super
      _h['profileId'] = profileId.to_jaxb_json_hash unless profileId.nil?
      _h['validationResult'] = validationResult.to_jaxb_json_hash unless validationResult.nil?
      _h['currency'] = currency.to_jaxb_json_hash unless currency.nil?
      if !paymentMethods.nil?
        _ha = Array.new
        paymentMethods.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['paymentMethods'] = _ha
      end
      _h['customerAddress'] = customerAddress.to_jaxb_json_hash unless customerAddress.nil?
      _h['comments'] = comments.to_jaxb_json_hash unless comments.nil?
      if !subscriptions.nil?
        _ha = Array.new
        subscriptions.each { | _item | _ha.push _item.to_jaxb_json_hash }
        _h['subscriptions'] = _ha
      end
      return _h
    end

    #initializes this CisSubscriptionProfileResult with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['profileId'].nil?
          _oa = _o['profileId']
            if(_oa.is_a? Hash)
              @profileId = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @profileId =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @profileId = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @profileId.push String.from_json(_item)
                 else
                   @profileId.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @profileId = _oa
            end
          end
        if !_o['validationResult'].nil?
          _oa = _o['validationResult']
            if(_oa.is_a? Hash)
              @validationResult = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @validationResult =  Com::Hybris::Cis::Api::Subscription::Model::CisSubscriptionTransactionResult.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @validationResult = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @validationResult.push Com::Hybris::Cis::Api::Subscription::Model::CisSubscriptionTransactionResult.from_json(_item)
                 else
                   @validationResult.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @validationResult = _oa
            end
          end
        if !_o['currency'].nil?
          _oa = _o['currency']
            if(_oa.is_a? Hash)
              @currency = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @currency =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @currency = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @currency.push String.from_json(_item)
                 else
                   @currency.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @currency = _oa
            end
          end
        if !_o['paymentMethods'].nil?
          _oa = _o['paymentMethods']
            if(_oa.is_a? Hash)
              @paymentMethods = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @paymentMethods =  Com::Hybris::Cis::Api::Subscription::Model::CisPaymentMethod.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @paymentMethods = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @paymentMethods.push Com::Hybris::Cis::Api::Subscription::Model::CisPaymentMethod.from_json(_item)
                 else
                   @paymentMethods.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @paymentMethods = _oa
            end
          end
        if !_o['customerAddress'].nil?
          _oa = _o['customerAddress']
            if(_oa.is_a? Hash)
              @customerAddress = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @customerAddress =  Com::Hybris::Cis::Api::Model::CisAddress.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @customerAddress = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @customerAddress.push Com::Hybris::Cis::Api::Model::CisAddress.from_json(_item)
                 else
                   @customerAddress.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @customerAddress = _oa
            end
          end
        if !_o['comments'].nil?
          _oa = _o['comments']
            if(_oa.is_a? Hash)
              @comments = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @comments =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @comments = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @comments.push String.from_json(_item)
                 else
                   @comments.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @comments = _oa
            end
          end
        if !_o['subscriptions'].nil?
          _oa = _o['subscriptions']
            if(_oa.is_a? Hash)
              @subscriptions = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @subscriptions =  Com::Hybris::Cis::Api::Subscription::Model::CisSubscriptionData.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @subscriptions = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @subscriptions.push Com::Hybris::Cis::Api::Subscription::Model::CisSubscriptionData.from_json(_item)
                 else
                   @subscriptions.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @subscriptions = _oa
            end
          end
    end

    # constructs a CisSubscriptionProfileResult from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end

module Com

module Hybris

module Cis

module Api

module Subscription

module Model

  # (no documentation provided)
  class CisSubscriptionChangeStateRequest < Com::Hybris::Cis::Api::Subscription::Model::AbstractCisSubscriptionUpdateRequest 

    # the new state
    attr_accessor :newState

    # the json hash for this CisSubscriptionChangeStateRequest
    def to_jaxb_json_hash
      _h = super
      _h['newState'] = newState.to_jaxb_json_hash unless newState.nil?
      return _h
    end

    #initializes this CisSubscriptionChangeStateRequest with a json hash
    def init_jaxb_json_hash(_o)
      super _o
        if !_o['newState'].nil?
          _oa = _o['newState']
            if(_oa.is_a? Hash)
              @newState = EnunciateHelpers::LAMB_CLASS_AWARE.call(_oa) if _oa['@class']
              @newState =  String.from_json(_oa) unless _oa['@class']
            elsif (_oa.is_a? Array)
              #an array(of hashes hopefully) or scalar
              @newState = Array.new
              _oa.each { | _item | 
                 if ((_item.nil? || _item['@class'].nil?)rescue true)
                   @newState.push String.from_json(_item)
                 else
                   @newState.push EnunciateHelpers::LAMB_CLASS_AWARE.call(_item)
                 end
               }
            else
                @newState = _oa
            end
          end
    end

    # constructs a CisSubscriptionChangeStateRequest from a (parsed) JSON hash
    def self.from_json(o)
      if o.nil?
        return nil
      else
        inst = new
        inst.init_jaxb_json_hash o
        return inst
      end
    end
  end

end

end

end

end

end

end
