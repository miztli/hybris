# -----------------------------------------------------------------------
# [y] hybris Platform
#
# Copyright (c) 2018 SAP SE or an SAP affiliate company. All rights reserved.
#
# This software is the confidential and proprietary information of SAP
# ("Confidential Information"). You shall not disclose such Confidential
# Information and shall use it only in accordance with the terms of the
# license agreement you entered into with SAP.
# -----------------------------------------------------------------------

HYBRIS_BIN_DIR=${platformhome}/../../bin
HYBRIS_CONFIG_DIR=${platformhome}/../../config
HYBRIS_DATA_DIR=${platformhome}/../../data
HYBRIS_LOG_DIR=${platformhome}/../../log
HYBRIS_TEMP_DIR=${platformhome}/../../temp/hybris

# If you want to add whitelist classes for ignoring "not-existent" classes, uncomment following ClassWhiteListRule with params
# You can use in params: single class name - e.g. de.hybris.SimpleCustomizer  
# for all classes in package - use char '*' , e.g. de.hybris.customizers.*
#YURLCLASSLOADER.IGNORE.RULE.0.CLASS=de.hybris.bootstrap.loader.rule.internal.ClassWhiteListRule
#YURLCLASSLOADER.IGNORE.RULE.0.PARAMS=de.hybirs.customizers.*,de.hybris.SimpleCustomizer
# Rule Ignore the class when ClassNotFoundException is thrown for the first time for this class  
YURLCLASSLOADER.IGNORE.RULE.1.CLASS=de.hybris.bootstrap.loader.rule.internal.CacheClassNotFoundRule
# Rule Ignore all classes with suffix 'Customizer' and 'BeanInfo' that are searched from java.beans.Introspector
YURLCLASSLOADER.IGNORE.RULE.2.CLASS=de.hybris.bootstrap.loader.rule.internal.IgnoreIntrospectorFilterClassRule