apply plugin: 'installer-platform-plugin'
apply plugin: 'installer-addon2-plugin'
apply plugin: 'installer-datahub-plugin'

def platformCfg = {

	localProperties {

		/* properties from hybris platform b2b + b2c in parallel recipe */
		property 'website.electronics.http', 'http://electronics.local:9001/yacceleratorstorefront'
		property 'website.electronics.https', 'https://electronics.local:9002/yacceleratorstorefront'
		property 'website.apparel-de.http', 'http://apparel-de.local:9001/yacceleratorstorefront'
		property 'website.apparel-de.https', 'https://apparel-de.local:9002/yacceleratorstorefront'
		property 'website.apparel-uk.http', 'http://apparel-uk.local:9001/yacceleratorstorefront'
		property 'website.apparel-uk.https', 'https://apparel-uk.local:9002/yacceleratorstorefront'
		property 'website.powertools.http', 'http://powertools.local:9001/yb2bacceleratorstorefront'
		property 'website.powertools.https', 'https://powertools.local:9002/yb2bacceleratorstorefront'

		/* please adapt the number ranges according to the settings in the ERP backend */
		property 'keygen.customer.sap_customer_id.start', '0000490000'
		property 'keygen.customer.sap_contact_id.start', '0000490000'

		/* config async order management - order number */
		property 'keygen.order.code.start', '0006200000'
        
        /* config start value of return order ID */
        property 'keygen.returnorder.code.start', '6782001'

		property 'sapcustomerexchange.outbound.datahub.feed', 'SAPCONSUMER_OUTBOUND_FEED'

		/* config sapcoreconfiguration */
		property 'sapcoreconfiguration.datahuboutbound.enabled', 'true'

		/* config async order management */
		property 'numberseries.cache.size.order_code', '1'
		property 'saporderexchange.orderoutbound.maxRetries', '3'
		property 'log4j.logger.de.hybris.platform.sap.orderexchange', 'debug'
		property 'datahubadapter.datahuboutbound.url', 'https://localhost:9793/datahub-webapp/v1'
		
        
        property 'apiregistryservices.events.exporting', 'false'
		property 'build.parallel', 'false'
	}

	extensions {

		/* Main extensions from b2c_b2b_acc recipe */  
				extName 'adaptivesearchsolr'
				extName 'adaptivesearchbackoffice'
				extName 'b2bcommercebackoffice'
				extName 'solrfacetsearchbackoffice'

				extName 'yacceleratorbackoffice'
				extName 'yacceleratorinitialdata'
				extName 'yacceleratorfulfilmentprocess'
				extName 'yacceleratorstorefront'
				extName 'ycommercewebservices'
				extName 'ycommercewebservicestest'

				extName 'apparelstore'
				extName 'electronicsstore'
				extName 'powertoolsstore'
				extName 'solrserver'

				extName 'acceleratorwebservicesaddon'
				extName 'b2bacceleratoraddon'
				extName 'commerceorgaddon'
				extName 'commerceorgsamplesaddon'
				extName 'orderselfserviceaddon'

				extName 'assistedservicestorefront'
				extName 'customerticketingaddon'
				extName 'customersupportbackoffice'

				extName 'rulebuilderbackoffice'
				extName 'couponbackoffice'
				extName 'droolsruleengineservices'
				extName 'couponfacades'
				extName 'couponservices'
				extName 'promotionenginesamplesaddon'

				extName 'textfieldconfiguratortemplatebackoffice'
				extName 'textfieldconfiguratortemplateaddon'

				extName 'cmswebservices'
				extName 'smarteditwebservices'
				extName 'permissionswebservices'
				extName 'smarteditaddon'
				extName 'cmssmartedit'
				extName 'previewwebservices'
				extName 'cmssmarteditwebservices'
				extName 'cmsoccaddon'

				extName 'pcmbackofficesamplesaddon'

				/* Additional extensions needed for SAP integration */
				extName 'secureportaladdon'
				extName 'datahubbackoffice'
		
				/* SAP integration scenario extensions */
				scanPath '${HYBRIS_BIN_DIR}/ext-integration/sap'
				extName 'sapcoreaddon'
				extName 'sapcoreconfigurationbackoffice'	
				extName 'sapmodelbackoffice'
				
				extName 'sapcustomerb2bbackoffice'
				
				extName 'b2bsappricing'		
				extName 'sappricingbackoffice'		
				
				extName 'ysaporderfulfillment'
				extName 'saporderexchangeb2b'
				extName 'saporderexchangebackoffice'
					
				extName 'ysapordermgmtb2baddon'
				extName 'sapordermgmtbackoffice'
			
				extName 'b2bsapproductavailability'
				extName 'sapproductavailabilitybackoffice'
					
				extName 'sapcreditcheckbackoffice'
				
				extName 'sapcoretest'
        
                /* extensions needed for order return */
                extName 'sapreturnsexchange'
                extName 'sapreturnsexchangeb2b'
                extName 'ysaperpreturnprocess'

				/* integration-apis */
				extName 'outboundservices'
				extName 'odata2webservices'
				extName 'odata2webservicesfeaturetests'

		        extName 'kymaintegrationbackoffice'
        		extName 'kymaintegrationsampledata'
	}
}

def thePlatform = platformFactory.createPlatform platformCfg
thePlatform.executeAntTarget "createConfig -Dinput.template=develop"

def CATALINA_OPTS = "-Xms4096m -Xmx4096m -XX:+UseConcMarkSweepGC -XX:+UseParNewGC -XX:+AlwaysPreTouch -XX:+DisableExplicitGC -XX:+CMSIncrementalMode -XX:+CMSIncrementalPacing -Dspring.profiles.active=no_auth"

def datahubServerId = 'datahub-tomcat'

def datahubWebappHome = platformHome + "/../ext-integration/datahub/web-app"

def datahubCfg = {

	libraries {

		propertyFile "local.properties", {

			/* datahub settings */
			property 'datahub.extension.exportURL', 'https://localhost:9002/datahubadapter'
			property 'datahub.extension.userName', 'admin'
			property 'datahub.extension.password', 'nimda'
			property 'datahub.encryption.key.path', 'encryption-key.txt'
			property 'datahub.server.url', 'https://localhost:9793/datahub-webapp/v1'

			/* common settings */
			property 'targetsystem.hybriscore.url', 'https://localhost:9002/datahubadapter'
			property 'targetsystem.hybriscore.username', 'admin'
			property 'targetsystem.hybriscore.password', 'nimda'

			property 'targetsystem.saperp.url', 'http://saperp.url'
			property 'targetsystem.saperp.username', 'username'
			property 'targetsystem.saperp.password', 'password'
			property 'targetsystem.saperp.receivername', 'ERP RFC destination name'

			/* sapcoreconfiguration and saperpreturnorder */
			property \
				'sapcoreconfiguration.autocompose.pools', \
				'GLOBAL,SAPCONFIGURATION_POOL,SAPCUSTOMER_INBOUND_POOL,SAPCONSUMER_INBOUND_POOL,SAPCONSUMER_OUTBOUND_POOL,SAPORDER_INBOUND_POOL,SAPORDER_OUTBOUND_POOL,SAPRETURNORDER_OUTBOUND_POOL,SAPORDER_OUTBOUND_S4HANA_POOL'
			property \
				'sapcoreconfiguration.autopublish.targetsystemsbypools', \
				'GLOBAL.HybrisCore,GLOBAL.SapErpSystem,SAPCUSTOMER_INBOUND_POOL.HybrisCore,SAPCONSUMER_INBOUND_POOL.HybrisCore,SAPCONSUMER_OUTBOUND_POOL.SapErpSystem,SAPORDER_OUTBOUND_POOL.SapErpSystem,SAPORDER_INBOUND_POOL.HybrisCore,SAPRETURNORDER_OUTBOUND_POOL.ErpSystem,SAPORDER_OUTBOUND_S4HANA_POOL.SapS4HanaSystem'
			property 'sapcoreconfiguration.autopublish.sleeptime', '5000'
			property 'sapcoreconfiguration.autopublish.initialsleeptime', '5000'
			property 'sapcoreconfiguration.pool', 'SAPCONFIGURATION_POOL'
            
            /* sapreturnorder */
            property 'sapreturnorder.outboundpool', 'SAPRETURNORDER_OUTBOUND_POOL'

			/* sapcustomer */
			property 'sapcustomer.language', 'en'

			/* sapidocoutboundadapter */
			property 'sapidocoutboundadapter.usedynamicidocnumberoffset', 'true'
			property 'sapidocoutboundadapter.receivername', 'ERP RFC destination name'
			property 'sapidocoutboundadapter.sendername', 'sendername'
			property 'sapidocoutboundadapter.senderport', 'senderport'
            
           
            
		}
	}

	extensionDir platformHome + "/../ext-integration/datahub/extensions/sap"
	extensions \
		'sapcoreconfiguration', \
		'sapidocintegration', \
		'sapidocoutboundadapter', \
		'party-canonical', \
		'product-canonical', \
		'sapcustomer-raw', \
		'sapcustomer-canonical', \
		'sapcustomer-target', \
		'saporder-raw', \
		'saporder-canonical', \
		'saporder-target', \
		'saperpproduct-raw', \
		'saperpproduct-canonical', \
		'saperpproduct-target', \
		'sappricing-raw', \
		'sappricing-canonical', \
		'sappricing-target', \
        'saperpreturnorder-raw', \
        'saperpreturnorder-canonical', \
        'saperpreturnorder-target'

	webappDir datahubWebappHome

	ports {
		http 8080
		ssl 9793
	}
}

task setupPlatform {

    doLast {
        thePlatform.executeAntTarget 'extgen -Dhybris.target=extgen -Dinput.template=yacceleratorstorefront -Dinput.name=yb2bacceleratorstorefront -Dinput.package=de.hybris.platform.yb2bacceleratorstorefront'

        thePlatform.extensions {
            extName 'yb2bacceleratorstorefront'
        }

        thePlatform.addons {
            forStoreFronts('yacceleratorstorefront,yb2bacceleratorstorefront') {
                names 'commerceorgsamplesaddon,assistedservicestorefront,customerticketingaddon,promotionenginesamplesaddon,textfieldconfiguratortemplateaddon,orderselfserviceaddon,smarteditaddon,sapcoreaddon,pcmbackofficesamplesaddon'
                template 'yacceleratorstorefront'
            }
        }


        thePlatform.addons {
            forStoreFronts('yb2bacceleratorstorefront') {
                names 'b2bacceleratoraddon,commerceorgaddon,ysapordermgmtb2baddon,secureportaladdon'
                template 'yacceleratorstorefront'
            }
        }


        thePlatform.addons {
            forStoreFronts('ycommercewebservices') {
                names 'acceleratorwebservicesaddon,cmsoccaddon'
                template 'ycommercewebservices'
            }
        }

        thePlatform.setup()

    }
}

task setupDataHub {
    doLast {
        datahub(datahubServerId).setup datahubCfg
        new File((File) buildDir, "../../../work/datahub-tomcat/lib/encryption-key.txt").write '8fae27b02e4e64dfb79f18947743b6f9'
    }
}

task validateDataHub {
    doLast {
        if (!file(datahubWebappHome).exists()) {
            throw new InvalidUserDataException("Please download the datahub zip from Extension Marketplace and unpack it to ${datahubWebappHome}")
        }
    }
}

setupDataHub.mustRunAfter validateDataHub
setupPlatform.mustRunAfter validateDataHub

task setup(dependsOn: [validateDataHub, setupPlatform, setupDataHub])

task startDataHub {
    doLast {
        datahub(datahubServerId).start CATALINA_OPTS
    }
}

task stopDataHub {
    doLast {
        datahub(datahubServerId).stop()
    }
}

task initialize {
    doLast {
        datahub(datahubServerId).start CATALINA_OPTS
        thePlatform.build()
        thePlatform.initialize()
        datahub(datahubServerId).stop()
    }
}

task build(dependsOn: [setup]) {
    doLast {
        thePlatform.build()
    }
}

task startPlatform {
    doLast {
        thePlatform.startInBackground()
    }
}

task stopPlatform {
    doLast {
        thePlatform.stopInBackground()
    }
}

task start(dependsOn: [startDataHub, startPlatform])

task stop(dependsOn: [stopDataHub, stopPlatform])
